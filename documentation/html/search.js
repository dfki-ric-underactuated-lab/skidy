window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "skidy", "modulename": "skidy", "kind": "module", "doc": "<h1 id=\"skidy-symbolic-kinematics-and-dynamics-generator\">skidy - symbolic kinematics and dynamics generator</h1>\n\n<ul>\n<li><a href=\"#1-installation\">1. Installation</a>\n<ul>\n<li><a href=\"#install-package-from-source\">Install package from source</a></li>\n<li><a href=\"#dependencies\">Dependencies</a></li>\n</ul></li>\n<li><a href=\"#2-usage\">2. Usage</a>\n<ul>\n<li><a href=\"#21-yaml-and-json\">2.1. YAML and JSON</a>\n<ul>\n<li><a href=\"#211-create-robot-model-as-yaml-file\">2.1.1. Create robot model as YAML file</a></li>\n<li><a href=\"#212-code-generation-using-yaml\">2.1.2. Code generation using YAML</a></li>\n</ul></li>\n<li><a href=\"#22-python\">2.2. Python</a></li>\n<li><a href=\"#23-urdf\">2.3. URDF</a></li>\n</ul></li>\n<li><a href=\"#3-unit-testing\">3. Unit testing</a></li>\n<li><a href=\"#4-benchmarking\">4. Benchmarking</a></li>\n<li><a href=\"#5-license\">5. License</a></li>\n</ul>\n\n<p>Symbolic kinematics and dynamics model generation using Equations of Motion in closed form.</p>\n\n<h2 id=\"1-installation\">1. Installation</h2>\n\n<h3 id=\"install-package-from-source\">Install package from source</h3>\n\n<p>To install the package from source go to the root folder of the package:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nb\">cd</span><span class=\"w\"> </span>/path/to/project\n</code></pre>\n</div>\n\n<p>then use:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>python3<span class=\"w\"> </span>-m<span class=\"w\"> </span>pip<span class=\"w\"> </span>install<span class=\"w\"> </span>-e<span class=\"w\"> </span>.\n</code></pre>\n</div>\n\n<p>to install the package in editable mode or:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>python3<span class=\"w\"> </span>-m<span class=\"w\"> </span>pip<span class=\"w\"> </span>install<span class=\"w\"> </span>.\n</code></pre>\n</div>\n\n<p>to install the package uneditable.</p>\n\n<p><strong>Note:</strong> The <code>.</code> is part of the command.  </p>\n\n<h3 id=\"dependencies\">Dependencies</h3>\n\n<p>The project has the following dependencies:</p>\n\n<ul>\n<li><p>sympy (Version &gt;= 1.8)</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>python3<span class=\"w\"> </span>-m<span class=\"w\"> </span>pip<span class=\"w\"> </span>install<span class=\"w\"> </span>--upgrade<span class=\"w\"> </span>sympy\n</code></pre>\n</div></li>\n<li><p>numpy</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>python3<span class=\"w\"> </span>-m<span class=\"w\"> </span>pip<span class=\"w\"> </span>install<span class=\"w\"> </span>numpy\n</code></pre>\n</div></li>\n<li><p>urdf_parser_py (Version &gt;= 0.0.4)</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>python3<span class=\"w\"> </span>-m<span class=\"w\"> </span>pip<span class=\"w\"> </span>install<span class=\"w\"> </span>--upgrade<span class=\"w\"> </span>urdf_parser_py\n</code></pre>\n</div></li>\n<li><p>regex</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>python3<span class=\"w\"> </span>-m<span class=\"w\"> </span>pip<span class=\"w\"> </span>install<span class=\"w\"> </span>regex\n</code></pre>\n</div></li>\n<li><p>PyYAML</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>python3<span class=\"w\"> </span>-m<span class=\"w\"> </span>pip<span class=\"w\"> </span>install<span class=\"w\"> </span>PyYAML\n</code></pre>\n</div></li>\n<li><p>pylatex</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>python3<span class=\"w\"> </span>-m<span class=\"w\"> </span>pip<span class=\"w\"> </span>install<span class=\"w\"> </span>pylatex\n</code></pre>\n</div></li>\n<li><p>pydot</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>python3<span class=\"w\"> </span>-m<span class=\"w\"> </span>pip<span class=\"w\"> </span>install<span class=\"w\"> </span>pydot\n</code></pre>\n</div></li>\n</ul>\n\n<p>For unit testing the following packages are additionally recommended:</p>\n\n<ul>\n<li><p>oct2py</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>python3<span class=\"w\"> </span>-m<span class=\"w\"> </span>pip<span class=\"w\"> </span>install<span class=\"w\"> </span>oct2py\n</code></pre>\n</div>\n\n<p>This requires a working octave installation on your system:\nInstall on Ubuntu with:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>sudo<span class=\"w\"> </span>apt<span class=\"w\"> </span>install<span class=\"w\"> </span>octave\n</code></pre>\n</div></li>\n<li><p>cython</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>python3<span class=\"w\"> </span>-m<span class=\"w\"> </span>pip<span class=\"w\"> </span>install<span class=\"w\"> </span>cython\n</code></pre>\n</div></li>\n<li><p>kinpy</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>python3<span class=\"w\"> </span>-m<span class=\"w\"> </span>pip<span class=\"w\"> </span>install<span class=\"w\"> </span>kinpy\n</code></pre>\n</div></li>\n<li><p>pinocchio</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>python3<span class=\"w\"> </span>-m<span class=\"w\"> </span>pip<span class=\"w\"> </span>install<span class=\"w\"> </span>pin\n</code></pre>\n</div></li>\n</ul>\n\n<h2 id=\"2-usage\">2. Usage</h2>\n\n<p>There are four ways to load your robot into the library:</p>\n\n<ol>\n<li>using a <em>YAML</em> file</li>\n<li>using a <em>JSON</em> file</li>\n<li>directly in <em>python</em></li>\n<li>using <em>URDF</em></li>\n</ol>\n\n<p>For defining a robot with one of the first three options (YAML, JSON, python) the following parameters are required:</p>\n\n<ul>\n<li>6D joint screw coordinates for any joint</li>\n<li>4x4 body reference coordinates for any link</li>\n<li>4x4 end-effector configuration w.r.t. last link body fixed frame in the chain</li>\n</ul>\n\n<p>For generating the inverse dynamics the following two parameters are required:</p>\n\n<ul>\n<li>3D gravity vector</li>\n<li>6x6 Mass-inertia matrix for any link</li>\n</ul>\n\n<p>Tree-like robot structures require the following graph description parameters additionally:</p>\n\n<ul>\n<li>parent link for any joint</li>\n<li>support graph for any joint</li>\n<li>(child links for any joint) -> currently not used</li>\n</ul>\n\n<p>Using URDF the following three parameters are required:</p>\n\n<ul>\n<li>path to URDF file</li>\n<li>4x4 end-effector configuration w.r.t. last link body fixed frame in the chain</li>\n<li>3D gravity vector</li>\n</ul>\n\n<h3 id=\"21-yaml-and-json\">2.1. YAML and JSON</h3>\n\n<p><strong>NOTE:</strong> As <em>JSON</em> and <em>YAML</em> files represent the same data structure this documentation covers only <em>YAML</em> files. Use <em>JSON</em> accordingly and just replace <code>yaml</code> with <code>json</code> in all commands.</p>\n\n<h4 id=\"211-create-robot-model-as-yaml-file\">2.1.1. Create robot model as YAML file</h4>\n\n<p>There is a function to generate a <strong>template YAML file</strong> in which it is easy to modify the parameters for your robot.\nTo generate your robot template use</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>python3<span class=\"w\"> </span>-m<span class=\"w\"> </span>skidy<span class=\"w\"> </span>--template<span class=\"w\"> </span><span class=\"o\">[</span>options<span class=\"o\">]</span><span class=\"w\"> </span>new_filename.yaml\n</code></pre>\n</div>\n\n<p>or the python function <code>skidy.generate_template_yaml(path, structure)</code>.</p>\n\n<p>For [options] the option <code>--structure</code> is highly recommended. There you can define which joint types to use in the template. E.g. use <code>--structure 'rrp'</code> for a robot which has two revolute joints followed by one prismatic joint.</p>\n\n<p>The command <code>python3 -m skidy --template --structure 'rp' my_robot_template.yaml</code> creates the following output file:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nn\">---</span>\n<span class=\"nt\">parent</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">0</span>\n<span class=\"w\">  </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">1</span>\n\n<span class=\"nt\">child</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"p p-Indicator\">[</span><span class=\"nv\">1</span><span class=\"p p-Indicator\">]</span>\n<span class=\"w\">  </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"p p-Indicator\">[]</span>\n\n<span class=\"nt\">support</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"p p-Indicator\">[</span><span class=\"nv\">1</span><span class=\"p p-Indicator\">]</span>\n<span class=\"w\">  </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"p p-Indicator\">[</span><span class=\"nv\">1</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">2</span><span class=\"p p-Indicator\">]</span>\n\n<span class=\"nt\">ee_parent</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">2</span>\n\n<span class=\"nt\">gravity</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p p-Indicator\">[</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">g</span><span class=\"p p-Indicator\">]</span>\n\n<span class=\"nt\">representation</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">spatial</span>\n\n<span class=\"nt\">joint_screw_coord</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"nt\">type</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">revolute</span>\n<span class=\"w\">    </span><span class=\"nt\">axis</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p p-Indicator\">[</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">1</span><span class=\"p p-Indicator\">]</span>\n<span class=\"w\">    </span><span class=\"nt\">vec</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p p-Indicator\">[</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">]</span>\n\n<span class=\"w\">  </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"nt\">type</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">prismatic</span>\n<span class=\"w\">    </span><span class=\"nt\">axis</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p p-Indicator\">[</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">1</span><span class=\"p p-Indicator\">]</span>\n\n<span class=\"nt\">body_ref_config</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"nt\">rotation</span><span class=\"p\">:</span>\n<span class=\"w\">      </span><span class=\"nt\">axis</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p p-Indicator\">[</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">1</span><span class=\"p p-Indicator\">]</span>\n<span class=\"w\">      </span><span class=\"nt\">angle</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">0</span>\n<span class=\"w\">    </span><span class=\"nt\">translation</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p p-Indicator\">[</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">]</span>\n\n<span class=\"w\">  </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"nt\">rotation</span><span class=\"p\">:</span>\n<span class=\"w\">      </span><span class=\"nt\">axis</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p p-Indicator\">[</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">1</span><span class=\"p p-Indicator\">]</span>\n<span class=\"w\">      </span><span class=\"nt\">angle</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">0</span>\n<span class=\"w\">    </span><span class=\"nt\">translation</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p p-Indicator\">[</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">]</span>\n\n<span class=\"nt\">ee</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"nt\">rotation</span><span class=\"p\">:</span>\n<span class=\"w\">      </span><span class=\"nt\">axis</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p p-Indicator\">[</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">1</span><span class=\"p p-Indicator\">]</span>\n<span class=\"w\">      </span><span class=\"nt\">angle</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">0</span>\n<span class=\"w\">    </span><span class=\"nt\">translation</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p p-Indicator\">[</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">]</span>\n\n<span class=\"nt\">mass_inertia</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"nt\">mass</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">m1</span>\n<span class=\"w\">    </span><span class=\"nt\">inertia</span><span class=\"p\">:</span>\n<span class=\"w\">      </span><span class=\"nt\">Ixx</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">Ixx1</span>\n<span class=\"w\">      </span><span class=\"nt\">Ixy</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">Ixy1</span>\n<span class=\"w\">      </span><span class=\"nt\">Ixz</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">Ixz1</span>\n<span class=\"w\">      </span><span class=\"nt\">Iyy</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">Iyy1</span>\n<span class=\"w\">      </span><span class=\"nt\">Iyz</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">Iyz1</span>\n<span class=\"w\">      </span><span class=\"nt\">Izz</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">Izz1</span>\n<span class=\"w\">    </span><span class=\"nt\">com</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p p-Indicator\">[</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">]</span>\n\n<span class=\"w\">  </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"nt\">mass</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">m2</span>\n<span class=\"w\">    </span><span class=\"nt\">inertia</span><span class=\"p\">:</span>\n<span class=\"w\">      </span><span class=\"nt\">Ixx</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">Ixx2</span>\n<span class=\"w\">      </span><span class=\"nt\">Ixy</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">Ixy2</span>\n<span class=\"w\">      </span><span class=\"nt\">Ixz</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">Ixz2</span>\n<span class=\"w\">      </span><span class=\"nt\">Iyy</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">Iyy2</span>\n<span class=\"w\">      </span><span class=\"nt\">Iyz</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">Iyz2</span>\n<span class=\"w\">      </span><span class=\"nt\">Izz</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">Izz2</span>\n<span class=\"w\">    </span><span class=\"nt\">com</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p p-Indicator\">[</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">]</span>\n\n<span class=\"nt\">q</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p p-Indicator\">[</span><span class=\"nv\">q1</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">q2</span><span class=\"p p-Indicator\">]</span>\n<span class=\"nt\">qd</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p p-Indicator\">[</span><span class=\"nv\">dq1</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">dq2</span><span class=\"p p-Indicator\">]</span>\n<span class=\"nt\">q2d</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p p-Indicator\">[</span><span class=\"nv\">ddq1</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">ddq2</span><span class=\"p p-Indicator\">]</span>\n<span class=\"nt\">WEE</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p p-Indicator\">[</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">]</span>\n</code></pre>\n</div>\n\n<p>The code explained:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nt\">parent</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">0</span>\n<span class=\"w\">  </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">1</span>\n\n<span class=\"nt\">child</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"p p-Indicator\">[</span><span class=\"nv\">1</span><span class=\"p p-Indicator\">]</span>\n<span class=\"w\">  </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"p p-Indicator\">[]</span>\n\n<span class=\"nt\">support</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"p p-Indicator\">[</span><span class=\"nv\">1</span><span class=\"p p-Indicator\">]</span>\n<span class=\"w\">  </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"p p-Indicator\">[</span><span class=\"nv\">1</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">2</span><span class=\"p p-Indicator\">]</span>\n\n<span class=\"nt\">ee_parent</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">2</span>\n</code></pre>\n</div>\n\n<p>The parameters are generated to represent a serial robot by default. Modify parameters for tree-like structures. For serial robots these parameters are optional.</p>\n\n<ul>\n<li><strong>parent</strong>: list of parent links for any joint. Use 0 for World.</li>\n<li><strong>child</strong>: list of lists with child links for any link. Use empty list if no child is present.</li>\n<li><strong>support</strong>: list of lists with all support links beginning with first link including current link for any link.</li>\n<li><strong>ee_parent</strong>: parent joint index for end-effector link. Defaults to last link. For robots with more than one end-effector you can use a list of indices instead e.g.: <code>ee_parent: [1,2]</code>. Note, that this requires a list of end_effector transforms <code>ee</code>.</li>\n</ul>\n\n<hr />\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nt\">gravity</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p p-Indicator\">[</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">g</span><span class=\"p p-Indicator\">]</span>\n</code></pre>\n</div>\n\n<p>Gravity vector.\n<strong>Note:</strong> you can always use symbolic variables instead of numeric values.</p>\n\n<hr />\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nt\">representation</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">spatial</span>\n</code></pre>\n</div>\n\n<p>Define whether the representation of the joint screw coordinates and the body reference configuration is w.r.t. world frame (<code>representation: spatial</code>) or in body fixed coordinates (<code>representation: body_fixed</code>)</p>\n\n<hr />\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nt\">joint_screw_coord</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"nt\">type</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">revolute</span>\n<span class=\"w\">    </span><span class=\"nt\">axis</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p p-Indicator\">[</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">1</span><span class=\"p p-Indicator\">]</span>\n<span class=\"w\">    </span><span class=\"nt\">vec</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p p-Indicator\">[</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">]</span>\n\n<span class=\"w\">  </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"nt\">type</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">prismatic</span>\n<span class=\"w\">    </span><span class=\"nt\">axis</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p p-Indicator\">[</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">1</span><span class=\"p p-Indicator\">]</span>\n</code></pre>\n</div>\n\n<p>The joint screw coordinates can be defined either using the syntax which is used above, where <code>type</code> is the joint type (<code>revolute</code> or <code>prismatic</code>), <code>axis</code> is the joint axis and <code>vec</code> is a vector from the origin to the joint axis.\nAlternatively, you can directly use the 6D joint screw vectors instead:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nt\">joint_screw_coord</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"p p-Indicator\">[</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">1</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">]</span>\n<span class=\"w\">  </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"p p-Indicator\">[</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">1</span><span class=\"p p-Indicator\">]</span>\n</code></pre>\n</div>\n\n<hr />\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nt\">body_ref_config</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"nt\">rotation</span><span class=\"p\">:</span>\n<span class=\"w\">      </span><span class=\"nt\">axis</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p p-Indicator\">[</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">1</span><span class=\"p p-Indicator\">]</span>\n<span class=\"w\">      </span><span class=\"nt\">angle</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">0</span>\n<span class=\"w\">    </span><span class=\"nt\">translation</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p p-Indicator\">[</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">]</span>\n\n<span class=\"w\">  </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"nt\">rotation</span><span class=\"p\">:</span>\n<span class=\"w\">      </span><span class=\"nt\">axis</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p p-Indicator\">[</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">1</span><span class=\"p p-Indicator\">]</span>\n<span class=\"w\">      </span><span class=\"nt\">angle</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">0</span>\n<span class=\"w\">    </span><span class=\"nt\">translation</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p p-Indicator\">[</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">]</span>\n</code></pre>\n</div>\n\n<p>The body reference configuration is a list of SE(3) transformation matrices. To define them you have several options:</p>\n\n<ol>\n<li><p>Write down the whole matrix e.g.:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nt\">body_ref_config</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"p p-Indicator\">[[</span><span class=\"nv\">cos(pi)</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">-sin(pi)</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"w\"> </span><span class=\"nv\">0</span><span class=\"p p-Indicator\">],</span>\n<span class=\"w\">     </span><span class=\"p p-Indicator\">[</span><span class=\"nv\">sin(pi)</span><span class=\"p p-Indicator\">,</span><span class=\"w\"> </span><span class=\"nv\">cos(pi)</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"w\"> </span><span class=\"nv\">0</span><span class=\"p p-Indicator\">],</span>\n<span class=\"w\">     </span><span class=\"p p-Indicator\">[</span><span class=\"w\">      </span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"w\">       </span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">1</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">L1</span><span class=\"p p-Indicator\">],</span>\n<span class=\"w\">     </span><span class=\"p p-Indicator\">[</span><span class=\"w\">      </span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"w\">       </span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"w\"> </span><span class=\"nv\">1</span><span class=\"p p-Indicator\">]]</span>\n</code></pre>\n</div></li>\n<li><p>Write rotation and translation separately:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nt\">body_ref_config</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"nt\">rotation</span><span class=\"p\">:</span>\n<span class=\"w\">      </span><span class=\"p p-Indicator\">[[</span><span class=\"nv\">1</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">],</span>\n<span class=\"w\">       </span><span class=\"p p-Indicator\">[</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">1</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">],</span>\n<span class=\"w\">       </span><span class=\"p p-Indicator\">[</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">1</span><span class=\"p p-Indicator\">]]</span>\n<span class=\"w\">    </span><span class=\"nt\">translation</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p p-Indicator\">[</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">L1</span><span class=\"p p-Indicator\">]</span>\n</code></pre>\n</div></li>\n<li><p>Use axis angle representation for rotation:\n-> See code above.</p></li>\n<li><p>For zero rotations or translations it is possible to omit the option:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nt\">body_ref_config</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"nt\">translation</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p p-Indicator\">[</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">L1</span><span class=\"p p-Indicator\">]</span>\n</code></pre>\n</div></li>\n<li><p>Use xyz_rpy coordinates to define Pose:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nt\">body_ref_config</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"nt\">xyzrpy</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p p-Indicator\">[</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"w\"> </span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"w\"> </span><span class=\"nv\">L1</span><span class=\"p p-Indicator\">,</span><span class=\"w\"> </span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"w\"> </span><span class=\"nv\">pi/2</span><span class=\"p p-Indicator\">,</span><span class=\"w\"> </span><span class=\"nv\">0</span><span class=\"p p-Indicator\">]</span>\n</code></pre>\n</div></li>\n<li><p>Use roll pitch yaw (rpy) euler angles to define rotation:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nt\">body_ref_config</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"nt\">rotation</span><span class=\"p\">:</span>\n<span class=\"w\">      </span><span class=\"nt\">rpy</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p p-Indicator\">[</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"w\"> </span><span class=\"nv\">pi/2</span><span class=\"p p-Indicator\">,</span><span class=\"w\"> </span><span class=\"nv\">0</span><span class=\"p p-Indicator\">]</span>\n<span class=\"w\">    </span><span class=\"nt\">translation</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p p-Indicator\">[</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">L1</span><span class=\"p p-Indicator\">]</span>\n</code></pre>\n</div></li>\n<li><p>Use quaternion [w,x,y,z] to define rotation:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nt\">body_ref_config</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"nt\">rotation</span><span class=\"p\">:</span>\n<span class=\"w\">      </span><span class=\"nt\">Q</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p p-Indicator\">[</span><span class=\"nv\">1</span><span class=\"p p-Indicator\">,</span><span class=\"w\"> </span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"w\"> </span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"w\"> </span><span class=\"nv\">0</span><span class=\"p p-Indicator\">]</span>\n<span class=\"w\">    </span><span class=\"nt\">translation</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p p-Indicator\">[</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">L1</span><span class=\"p p-Indicator\">]</span>\n</code></pre>\n</div></li>\n</ol>\n\n<hr />\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nt\">ee</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"nt\">rotation</span><span class=\"p\">:</span>\n<span class=\"w\">      </span><span class=\"nt\">axis</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p p-Indicator\">[</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">1</span><span class=\"p p-Indicator\">]</span>\n<span class=\"w\">      </span><span class=\"nt\">angle</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">0</span>\n<span class=\"w\">    </span><span class=\"nt\">translation</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p p-Indicator\">[</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">]</span>\n</code></pre>\n</div>\n\n<p>End-effector representation w.r.t. last link body frame in the chain as SE(3) transformation matrix. Here you have the same syntax options as for the body reference configuration. For robots with more than one end-effector you can define more than one transform here. Note: in this case you have to define a list of parent joints in <code>ee_parent</code>.\nIf you have just one end-effector, you can omit the top level list (indicated by the trailing <code>-</code>).</p>\n\n<hr />\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nt\">mass_inertia</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"nt\">mass</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">m1</span>\n<span class=\"w\">    </span><span class=\"nt\">inertia</span><span class=\"p\">:</span>\n<span class=\"w\">      </span><span class=\"nt\">Ixx</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">Ixx1</span>\n<span class=\"w\">      </span><span class=\"nt\">Ixy</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">Ixy1</span>\n<span class=\"w\">      </span><span class=\"nt\">Ixz</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">Ixz1</span>\n<span class=\"w\">      </span><span class=\"nt\">Iyy</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">Iyy1</span>\n<span class=\"w\">      </span><span class=\"nt\">Iyz</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">Iyz1</span>\n<span class=\"w\">      </span><span class=\"nt\">Izz</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">Izz1</span>\n<span class=\"w\">    </span><span class=\"nt\">com</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p p-Indicator\">[</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">]</span>\n\n<span class=\"w\">  </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"nt\">mass</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">m2</span>\n<span class=\"w\">    </span><span class=\"nt\">inertia</span><span class=\"p\">:</span>\n<span class=\"w\">      </span><span class=\"nt\">Ixx</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">Ixx2</span>\n<span class=\"w\">      </span><span class=\"nt\">Ixy</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">Ixy2</span>\n<span class=\"w\">      </span><span class=\"nt\">Ixz</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">Ixz2</span>\n<span class=\"w\">      </span><span class=\"nt\">Iyy</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">Iyy2</span>\n<span class=\"w\">      </span><span class=\"nt\">Iyz</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">Iyz2</span>\n<span class=\"w\">      </span><span class=\"nt\">Izz</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">Izz2</span>\n<span class=\"w\">    </span><span class=\"nt\">com</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p p-Indicator\">[</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">]</span>\n</code></pre>\n</div>\n\n<p>Mass-inertia matrices of all links. For the definition you have the following syntax options:</p>\n\n<ol>\n<li><p>Write down whole matrix:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nt\">mass_inertia</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"p p-Indicator\">[[</span><span class=\"w\">   </span><span class=\"nv\">Ixx1</span><span class=\"p p-Indicator\">,</span><span class=\"w\">    </span><span class=\"nv\">Ixy1</span><span class=\"p p-Indicator\">,</span><span class=\"w\">    </span><span class=\"nv\">Ixz1</span><span class=\"p p-Indicator\">,</span><span class=\"w\">       </span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"w\"> </span><span class=\"nv\">-cz1*m1</span><span class=\"p p-Indicator\">,</span><span class=\"w\">  </span><span class=\"nv\">cy1*m1</span><span class=\"p p-Indicator\">],</span>\n<span class=\"w\">     </span><span class=\"p p-Indicator\">[</span><span class=\"w\">   </span><span class=\"nv\">Ixy1</span><span class=\"p p-Indicator\">,</span><span class=\"w\">    </span><span class=\"nv\">Iyy1</span><span class=\"p p-Indicator\">,</span><span class=\"w\">    </span><span class=\"nv\">Iyz1</span><span class=\"p p-Indicator\">,</span><span class=\"w\">  </span><span class=\"nv\">cz1*m1</span><span class=\"p p-Indicator\">,</span><span class=\"w\">       </span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"w\"> </span><span class=\"nv\">-cx1*m1</span><span class=\"p p-Indicator\">],</span>\n<span class=\"w\">     </span><span class=\"p p-Indicator\">[</span><span class=\"w\">   </span><span class=\"nv\">Ixz1</span><span class=\"p p-Indicator\">,</span><span class=\"w\">    </span><span class=\"nv\">Iyz1</span><span class=\"p p-Indicator\">,</span><span class=\"w\">    </span><span class=\"nv\">Izz1</span><span class=\"p p-Indicator\">,</span><span class=\"w\"> </span><span class=\"nv\">-cy1*m1</span><span class=\"p p-Indicator\">,</span><span class=\"w\">  </span><span class=\"nv\">cx1*m1</span><span class=\"p p-Indicator\">,</span><span class=\"w\">       </span><span class=\"nv\">0</span><span class=\"p p-Indicator\">],</span>\n<span class=\"w\">     </span><span class=\"p p-Indicator\">[</span><span class=\"w\">      </span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"w\">  </span><span class=\"nv\">cz1*m1</span><span class=\"p p-Indicator\">,</span><span class=\"w\"> </span><span class=\"nv\">-cy1*m1</span><span class=\"p p-Indicator\">,</span><span class=\"w\">      </span><span class=\"nv\">m1</span><span class=\"p p-Indicator\">,</span><span class=\"w\">       </span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"w\">       </span><span class=\"nv\">0</span><span class=\"p p-Indicator\">],</span>\n<span class=\"w\">     </span><span class=\"p p-Indicator\">[</span><span class=\"nv\">-cz1*m1</span><span class=\"p p-Indicator\">,</span><span class=\"w\">       </span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"w\">  </span><span class=\"nv\">cx1*m1</span><span class=\"p p-Indicator\">,</span><span class=\"w\">       </span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"w\">      </span><span class=\"nv\">m1</span><span class=\"p p-Indicator\">,</span><span class=\"w\">       </span><span class=\"nv\">0</span><span class=\"p p-Indicator\">],</span>\n<span class=\"w\">     </span><span class=\"p p-Indicator\">[</span><span class=\"w\"> </span><span class=\"nv\">cy1*m1</span><span class=\"p p-Indicator\">,</span><span class=\"w\"> </span><span class=\"nv\">-cx1*m1</span><span class=\"p p-Indicator\">,</span><span class=\"w\">       </span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"w\">       </span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"w\">       </span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"w\">      </span><span class=\"nv\">m1</span><span class=\"p p-Indicator\">]]</span>\n</code></pre>\n</div></li>\n<li><p>Define mass, inertia and center of mass (com) separately:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nt\">mass_inertia</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"nt\">mass</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">m1</span>\n<span class=\"w\">    </span><span class=\"nt\">inertia</span><span class=\"p\">:</span>\n<span class=\"w\">      </span><span class=\"p p-Indicator\">[[</span><span class=\"nv\">Ixx1</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">Ixy1</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">Ixz1</span><span class=\"p p-Indicator\">],</span>\n<span class=\"w\">       </span><span class=\"p p-Indicator\">[</span><span class=\"nv\">Ixy1</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">Iyy1</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">Iyz1</span><span class=\"p p-Indicator\">],</span>\n<span class=\"w\">       </span><span class=\"p p-Indicator\">[</span><span class=\"nv\">Ixz1</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">Iyz1</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">Izz1</span><span class=\"p p-Indicator\">]]</span>\n<span class=\"w\">    </span><span class=\"nt\">com</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p p-Indicator\">[</span><span class=\"nv\">cx1</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">cy1</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">cz1</span><span class=\"p p-Indicator\">]</span>\n</code></pre>\n</div></li>\n<li><p>Only define the 6 independent inertia parameters:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nt\">mass_inertia</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"nt\">mass</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">m1</span>\n<span class=\"w\">    </span><span class=\"nt\">inertia</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p p-Indicator\">[</span><span class=\"nv\">Ixx1</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">Ixy1</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">Ixz1</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">Iyy1</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">Iyz1</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">Izz1</span><span class=\"p p-Indicator\">]</span>\n<span class=\"w\">    </span><span class=\"nt\">com</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p p-Indicator\">[</span><span class=\"nv\">cx1</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">cy1</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">cz1</span><span class=\"p p-Indicator\">]</span>\n</code></pre>\n</div></li>\n<li><p>Define only necessary inertia parameters:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nt\">mass_inertia</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"nt\">mass</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">m1</span>\n<span class=\"w\">    </span><span class=\"nt\">inertia</span><span class=\"p\">:</span><span class=\"w\"> </span>\n<span class=\"w\">      </span><span class=\"nt\">Ixx</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">Ixx1</span>\n<span class=\"w\">      </span><span class=\"nt\">Iyy</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">Iyy1</span>\n<span class=\"w\">      </span><span class=\"nt\">Izz</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">Izz1</span>\n<span class=\"w\">    </span><span class=\"nt\">com</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p p-Indicator\">[</span><span class=\"nv\">cx1</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">cy1</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">cz1</span><span class=\"p p-Indicator\">]</span>\n</code></pre>\n</div>\n\n<p>Supports the parameters <code>Ixx</code>, <code>Ixy</code>, <code>Ixz</code>, <code>Iyy</code>, <code>Iyz</code> and <code>Izz</code>. All parameters default to 0.</p></li>\n<li><p>Define only one value which is internally multiplied by an identity matrix:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nt\">mass_inertia</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"nt\">mass</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">m1</span>\n<span class=\"w\">    </span><span class=\"nt\">inertia</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">m1*L1**2</span>\n<span class=\"w\">    </span><span class=\"nt\">com</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p p-Indicator\">[</span><span class=\"nv\">cx1</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">cy1</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">cz1</span><span class=\"p p-Indicator\">]</span>\n</code></pre>\n</div></li>\n<li><p>Automatically generate symbols in inertia matrix:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nt\">mass_inertia</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"nt\">mass</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">m1</span>\n<span class=\"w\">    </span><span class=\"nt\">inertia</span><span class=\"p\">:</span>\n<span class=\"w\">      </span><span class=\"nt\">index</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">1</span>\n<span class=\"w\">      </span><span class=\"nt\">pointmass</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">False</span>\n<span class=\"w\">    </span><span class=\"nt\">com</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p p-Indicator\">[</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">]</span>\n</code></pre>\n</div>\n\n<p>Here the parameter index is appended to the names <code>Ixx</code> etc. and generates an inertia matrix following the naming scheme used in the examples above.\nWith the parameter <code>pointmass: True</code> the resulting inertia matrix looks like this:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"p p-Indicator\">[[</span><span class=\"nv\">I1</span><span class=\"p p-Indicator\">,</span><span class=\"w\"> </span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"w\"> </span><span class=\"nv\">0</span><span class=\"p p-Indicator\">],</span>\n<span class=\"w\"> </span><span class=\"p p-Indicator\">[</span><span class=\"w\"> </span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">I1</span><span class=\"p p-Indicator\">,</span><span class=\"w\"> </span><span class=\"nv\">0</span><span class=\"p p-Indicator\">],</span>\n<span class=\"w\"> </span><span class=\"p p-Indicator\">[</span><span class=\"w\"> </span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"w\"> </span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">I1</span><span class=\"p p-Indicator\">]]</span>\n</code></pre>\n</div></li>\n</ol>\n\n<hr />\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nt\">q</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p p-Indicator\">[</span><span class=\"nv\">q1</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">q2</span><span class=\"p p-Indicator\">]</span>\n<span class=\"nt\">qd</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p p-Indicator\">[</span><span class=\"nv\">dq1</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">dq2</span><span class=\"p p-Indicator\">]</span>\n<span class=\"nt\">q2d</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p p-Indicator\">[</span><span class=\"nv\">ddq1</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">ddq2</span><span class=\"p p-Indicator\">]</span>\n<span class=\"nt\">WEE</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p p-Indicator\">[</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">]</span>\n</code></pre>\n</div>\n\n<p>Define symbolic generalized vectors (q, qd, q2d) and the time varying wrench on the end-effector link (WEE). Where the generalized vectors are list of length n and the wrench is a list of length 6 with symbolic values e.g.: <code>[Mx,My,Mz,Fx,Fy,Fz]</code>.\nIf the robot has more than one end-effector, one wrench per end_effector has to be defined in a list instead, e.g.:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nt\">WEE</span><span class=\"p\">:</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"p p-Indicator\">[</span><span class=\"nv\">Mx1</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">My1</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">Mz1</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">Fx1</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">Fy1</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">Fz1</span><span class=\"p p-Indicator\">]</span>\n<span class=\"w\">  </span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"p p-Indicator\">[</span><span class=\"nv\">Mx2</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">My2</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">Mz2</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">Fx2</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">Fy2</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">Fz2</span><span class=\"p p-Indicator\">]</span>\n</code></pre>\n</div>\n\n<p>Add jerk and jounce here, to activate the calculation of the 1st and 2nd order derivatives of the Equation of Motion. Optionally, you can define the time derivatives of the external wrench <code>WDEE</code> and <code>W2DEE</code> here accordingly. E.g.:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nt\">q</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p p-Indicator\">[</span><span class=\"nv\">q1</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">q2</span><span class=\"p p-Indicator\">]</span>\n<span class=\"nt\">qd</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p p-Indicator\">[</span><span class=\"nv\">dq1</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">dq2</span><span class=\"p p-Indicator\">]</span>\n<span class=\"nt\">q2d</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p p-Indicator\">[</span><span class=\"nv\">ddq1</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">ddq2</span><span class=\"p p-Indicator\">]</span>\n<span class=\"nt\">q3d</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p p-Indicator\">[</span><span class=\"nv\">dddq1</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">dddq2</span><span class=\"p p-Indicator\">]</span>\n<span class=\"nt\">q4d</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p p-Indicator\">[</span><span class=\"nv\">ddddq1</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">ddddq2</span><span class=\"p p-Indicator\">]</span>\n<span class=\"nt\">WEE</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p p-Indicator\">[</span><span class=\"nv\">Mx</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">My</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">Mz</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">Fx</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">Fy</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">Fz</span><span class=\"p p-Indicator\">]</span>\n<span class=\"nt\">WDEE</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p p-Indicator\">[</span><span class=\"nv\">dMx</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">dMy</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">dMz</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">dFx</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">dFy</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">dFz</span><span class=\"p p-Indicator\">]</span>\n<span class=\"nt\">W2DEE</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p p-Indicator\">[</span><span class=\"nv\">ddMx</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">ddMy</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">ddMz</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">ddFx</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">ddFy</span><span class=\"p p-Indicator\">,</span><span class=\"nv\">ddFz</span><span class=\"p p-Indicator\">]</span>\n</code></pre>\n</div>\n\n<h4 id=\"212-code-generation-using-yaml\">2.1.2. Code generation using YAML</h4>\n\n<p>To start the code generation process use:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>python3<span class=\"w\"> </span>-m<span class=\"w\"> </span>skidy<span class=\"w\"> </span><span class=\"o\">[</span>options<span class=\"o\">]</span><span class=\"w\"> </span>path/to/robot.yaml\n</code></pre>\n</div>\n\n<p>In the options you have to specify what kind of code (python <code>-p</code>, Matlab <code>-m</code>, C <code>-C</code>, julia <code>-j</code>, cython <code>--cython</code>, latex <code>-l</code>) you'd like to generate and whether the equations should be simplified <code>-s</code>.</p>\n\n<p>Use</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>python3<span class=\"w\"> </span>-m<span class=\"w\"> </span>skidy<span class=\"w\"> </span>-h\n</code></pre>\n</div>\n\n<p>to get a description of all available options.</p>\n\n<h3 id=\"22-python\">2.2. Python</h3>\n\n<p>As for YAML and JSON there is a function to auto-generate a <strong>python template file</strong> which makes it easier to define your own robot.\nTo generate your robot template use</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>python3<span class=\"w\"> </span>-m<span class=\"w\"> </span>skidy<span class=\"w\"> </span>--template<span class=\"w\"> </span><span class=\"o\">[</span>options<span class=\"o\">]</span><span class=\"w\"> </span>new_filename.py\n</code></pre>\n</div>\n\n<p>or the python function <code>skidy.generate_template_python(path, structure)</code>.</p>\n\n<p>For [options] the option <code>--structure</code> is highly recommended. There you can define which joint types to use in the template. E.g. use <code>--structure 'rrp'</code> for a robot which has two revolute joints followed by one prismatic joint.</p>\n\n<p>The command <code>python3 -m skidy --template --structure 'rp' my_robot_template.py</code> creates the following output file:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">skidy</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">SymbolicKinDyn</span><span class=\"p\">,</span>\n                   <span class=\"n\">transformation_matrix</span><span class=\"p\">,</span>\n                   <span class=\"n\">mass_matrix_mixed_data</span><span class=\"p\">,</span>\n                   <span class=\"n\">joint_screw</span><span class=\"p\">,</span>\n                   <span class=\"n\">SO3Exp</span><span class=\"p\">,</span>\n                   <span class=\"n\">inertia_matrix</span><span class=\"p\">,</span>\n                   <span class=\"n\">generalized_vectors</span><span class=\"p\">)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">skidy.symbols</span> <span class=\"kn\">import</span> <span class=\"n\">g</span><span class=\"p\">,</span> <span class=\"n\">pi</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sympy</span>\n\n<span class=\"c1\"># Define symbols:</span>\n<span class=\"n\">m1</span><span class=\"p\">,</span> <span class=\"n\">m2</span> <span class=\"o\">=</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">symbols</span><span class=\"p\">(</span><span class=\"s1\">&#39;m1 m2&#39;</span><span class=\"p\">,</span> <span class=\"n\">real</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">const</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">Ixx1</span><span class=\"p\">,</span> <span class=\"n\">Ixx2</span> <span class=\"o\">=</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">symbols</span><span class=\"p\">(</span><span class=\"s1\">&#39;Ixx1 Ixx2&#39;</span><span class=\"p\">,</span> <span class=\"n\">real</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">const</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">Ixy1</span><span class=\"p\">,</span> <span class=\"n\">Ixy2</span> <span class=\"o\">=</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">symbols</span><span class=\"p\">(</span><span class=\"s1\">&#39;Ixy1 Ixy2&#39;</span><span class=\"p\">,</span> <span class=\"n\">real</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">const</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">Ixz1</span><span class=\"p\">,</span> <span class=\"n\">Ixz2</span> <span class=\"o\">=</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">symbols</span><span class=\"p\">(</span><span class=\"s1\">&#39;Ixz1 Ixz2&#39;</span><span class=\"p\">,</span> <span class=\"n\">real</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">const</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">Iyy1</span><span class=\"p\">,</span> <span class=\"n\">Iyy2</span> <span class=\"o\">=</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">symbols</span><span class=\"p\">(</span><span class=\"s1\">&#39;Iyy1 Iyy2&#39;</span><span class=\"p\">,</span> <span class=\"n\">real</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">const</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">Iyz1</span><span class=\"p\">,</span> <span class=\"n\">Iyz2</span> <span class=\"o\">=</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">symbols</span><span class=\"p\">(</span><span class=\"s1\">&#39;Iyz1 Iyz2&#39;</span><span class=\"p\">,</span> <span class=\"n\">real</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">const</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">Izz1</span><span class=\"p\">,</span> <span class=\"n\">Izz2</span> <span class=\"o\">=</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">symbols</span><span class=\"p\">(</span><span class=\"s1\">&#39;Izz1 Izz2&#39;</span><span class=\"p\">,</span> <span class=\"n\">real</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">const</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Define connectivity graph</span>\n<span class=\"n\">parent</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n          <span class=\"mi\">1</span><span class=\"p\">]</span>\n\n<span class=\"n\">child</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"mi\">1</span><span class=\"p\">],</span>\n         <span class=\"p\">[]]</span>\n\n<span class=\"n\">support</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"mi\">1</span><span class=\"p\">],</span>\n           <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">]]</span>\n\n<span class=\"n\">ee_parent</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n\n<span class=\"c1\"># gravity vector</span>\n<span class=\"n\">gravity</span> <span class=\"o\">=</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">Matrix</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"n\">g</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># representation of joint screw coordinates and body reference configurations</span>\n<span class=\"n\">representation</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;spatial&#39;</span> <span class=\"c1\"># alternative: &#39;body_fixed&#39;</span>\n\n<span class=\"c1\"># joint screw coordinates (6x1 sympy.Matrix per joint)</span>\n<span class=\"n\">joint_screw_coord</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"n\">joint_screw_coord</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">joint_screw</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">vec</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">revolute</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n<span class=\"n\">joint_screw_coord</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">joint_screw</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">revolute</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># body reference configurations (4x4 SE3 Pose (sympy.Matrix) per link)</span>\n<span class=\"n\">body_ref_config</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"n\">body_ref_config</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">transformation_matrix</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"o\">=</span><span class=\"n\">SO3Exp</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],</span><span class=\"n\">angle</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">),</span><span class=\"n\">t</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">]))</span>\n<span class=\"n\">body_ref_config</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">transformation_matrix</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"o\">=</span><span class=\"n\">SO3Exp</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],</span><span class=\"n\">angle</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">),</span><span class=\"n\">t</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">]))</span>\n\n<span class=\"c1\"># end-effector configuration w.r.t. last link body fixed frame in the chain (4x4 SE3 Pose (sympy.Matrix))</span>\n<span class=\"n\">ee</span> <span class=\"o\">=</span> <span class=\"n\">transformation_matrix</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"o\">=</span><span class=\"n\">SO3Exp</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],</span><span class=\"n\">angle</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">),</span><span class=\"n\">t</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># mass_inertia parameters (6x6 sympy.Matrix per link)</span>\n<span class=\"n\">Mb</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"n\">Mb</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">mass_matrix_mixed_data</span><span class=\"p\">(</span><span class=\"n\">m1</span><span class=\"p\">,</span> <span class=\"n\">inertia_matrix</span><span class=\"p\">(</span><span class=\"n\">Ixx1</span><span class=\"p\">,</span><span class=\"n\">Ixy1</span><span class=\"p\">,</span><span class=\"n\">Ixz1</span><span class=\"p\">,</span><span class=\"n\">Iyy1</span><span class=\"p\">,</span><span class=\"n\">Iyz1</span><span class=\"p\">,</span><span class=\"n\">Izz1</span><span class=\"p\">),</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">Matrix</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">])))</span>\n<span class=\"n\">Mb</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">mass_matrix_mixed_data</span><span class=\"p\">(</span><span class=\"n\">m2</span><span class=\"p\">,</span> <span class=\"n\">inertia_matrix</span><span class=\"p\">(</span><span class=\"n\">Ixx2</span><span class=\"p\">,</span><span class=\"n\">Ixy2</span><span class=\"p\">,</span><span class=\"n\">Ixz2</span><span class=\"p\">,</span><span class=\"n\">Iyy2</span><span class=\"p\">,</span><span class=\"n\">Iyz2</span><span class=\"p\">,</span><span class=\"n\">Izz2</span><span class=\"p\">),</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">Matrix</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">])))</span>\n\n<span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"n\">qd</span><span class=\"p\">,</span> <span class=\"n\">q2d</span> <span class=\"o\">=</span> <span class=\"n\">generalized_vectors</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">body_ref_config</span><span class=\"p\">),</span> <span class=\"n\">startindex</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">WEE</span> <span class=\"o\">=</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">skd</span> <span class=\"o\">=</span> <span class=\"n\">SymbolicKinDyn</span><span class=\"p\">(</span><span class=\"n\">gravity_vector</span><span class=\"o\">=</span><span class=\"n\">gravity</span><span class=\"p\">,</span>\n                     <span class=\"n\">ee</span><span class=\"o\">=</span><span class=\"n\">ee</span><span class=\"p\">,</span>\n                     <span class=\"n\">body_ref_config</span><span class=\"o\">=</span><span class=\"n\">body_ref_config</span><span class=\"p\">,</span>\n                     <span class=\"n\">joint_screw_coord</span><span class=\"o\">=</span><span class=\"n\">joint_screw_coord</span><span class=\"p\">,</span>\n                     <span class=\"n\">config_representation</span><span class=\"o\">=</span><span class=\"n\">representation</span><span class=\"p\">,</span>\n                     <span class=\"n\">Mb</span><span class=\"o\">=</span><span class=\"n\">Mb</span><span class=\"p\">,</span>\n                     <span class=\"n\">parent</span><span class=\"o\">=</span><span class=\"n\">parent</span><span class=\"p\">,</span>\n                     <span class=\"n\">child</span><span class=\"o\">=</span><span class=\"n\">child</span><span class=\"p\">,</span>\n                     <span class=\"n\">support</span><span class=\"o\">=</span><span class=\"n\">support</span><span class=\"p\">,</span>\n                     <span class=\"n\">ee_parent</span><span class=\"o\">=</span><span class=\"n\">ee_parent</span><span class=\"p\">,</span>\n                     <span class=\"p\">)</span>\n\n<span class=\"c1\"># run Calculations</span>\n<span class=\"n\">skd</span><span class=\"o\">.</span><span class=\"n\">closed_form_kinematics_body_fixed</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"n\">qd</span><span class=\"p\">,</span> <span class=\"n\">q2d</span><span class=\"p\">,</span> <span class=\"n\">simplify</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">skd</span><span class=\"o\">.</span><span class=\"n\">closed_form_inv_dyn_body_fixed</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"n\">qd</span><span class=\"p\">,</span> <span class=\"n\">q2d</span><span class=\"p\">,</span> <span class=\"n\">WEE</span><span class=\"o\">=</span><span class=\"n\">WEE</span><span class=\"p\">,</span> <span class=\"n\">simplify</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Generate Code</span>\n<span class=\"n\">skd</span><span class=\"o\">.</span><span class=\"n\">generate_code</span><span class=\"p\">(</span><span class=\"n\">python</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">C</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">Matlab</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">latex</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                 <span class=\"n\">folder</span><span class=\"o\">=</span><span class=\"s2\">&quot;./generated_code&quot;</span><span class=\"p\">,</span> <span class=\"n\">use_global_vars</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                 <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;plant&quot;</span><span class=\"p\">,</span> <span class=\"n\">project</span><span class=\"o\">=</span><span class=\"s2\">&quot;Project&quot;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>The code explained:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">skidy</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">SymbolicKinDyn</span><span class=\"p\">,</span>\n                   <span class=\"n\">transformation_matrix</span><span class=\"p\">,</span>\n                   <span class=\"n\">mass_matrix_mixed_data</span><span class=\"p\">,</span>\n                   <span class=\"n\">joint_screw</span><span class=\"p\">,</span>\n                   <span class=\"n\">SO3Exp</span><span class=\"p\">,</span>\n                   <span class=\"n\">inertia_matrix</span><span class=\"p\">,</span>\n                   <span class=\"n\">generalized_vectors</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>The class <code>SymbolicKinDyn</code> is the main object for calculating the kinematic and dynamic equations of your robot and generate the code.\nAdditionally, we import several helper functions for defining the matrices which are useful for the robot definition:</p>\n\n<ul>\n<li><code>transformation_matrix</code>: Create SE(3) transformation matrix from SO(3) rotation and translation vector.</li>\n<li><code>mass_matrix_mixed_data</code>: Create 6x6 mass-inertia matrix from mass, 3x3 inertia matrix and 3x1 center of mass vector.</li>\n<li><code>joint_screw</code>: create 6x1 joint screw vector from joint axis and vector from origin to joint axis.</li>\n<li><code>SO3Exp</code>: Exponential mapping of SO(3) to generate rotation matrix from rotation angle and rotation axis.</li>\n<li><code>inertia_matrix</code>: generate 3x3 inertia matrix from 6 independent parameters (Ixx, Ixy, ...).</li>\n<li><code>generalized_vectors</code>: generate symbolic generalized vectors q, qd and q2d of predefined length n.</li>\n</ul>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">skidy.symbols</span> <span class=\"kn\">import</span> <span class=\"n\">g</span><span class=\"p\">,</span> <span class=\"n\">pi</span>\n</code></pre>\n</div>\n\n<p>The package <code>skidy.symbols</code> includes the most common used symbolic variables, which can be used for defining your robot.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">sympy</span>\n</code></pre>\n</div>\n\n<p>The whole library used sympy objects for all symbolic equations etc. Hence, we need <code>sympy</code> to create additional symbolic variables and matrices later.</p>\n\n<hr />\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"c1\"># Define symbols:</span>\n<span class=\"n\">m1</span><span class=\"p\">,</span> <span class=\"n\">m2</span> <span class=\"o\">=</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">symbols</span><span class=\"p\">(</span><span class=\"s1\">&#39;m1 m2&#39;</span><span class=\"p\">,</span> <span class=\"n\">real</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">const</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">Ixx1</span><span class=\"p\">,</span> <span class=\"n\">Ixx2</span> <span class=\"o\">=</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">symbols</span><span class=\"p\">(</span><span class=\"s1\">&#39;Ixx1 Ixx2&#39;</span><span class=\"p\">,</span> <span class=\"n\">real</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">const</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">Ixy1</span><span class=\"p\">,</span> <span class=\"n\">Ixy2</span> <span class=\"o\">=</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">symbols</span><span class=\"p\">(</span><span class=\"s1\">&#39;Ixy1 Ixy2&#39;</span><span class=\"p\">,</span> <span class=\"n\">real</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">const</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">Ixz1</span><span class=\"p\">,</span> <span class=\"n\">Ixz2</span> <span class=\"o\">=</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">symbols</span><span class=\"p\">(</span><span class=\"s1\">&#39;Ixz1 Ixz2&#39;</span><span class=\"p\">,</span> <span class=\"n\">real</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">const</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">Iyy1</span><span class=\"p\">,</span> <span class=\"n\">Iyy2</span> <span class=\"o\">=</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">symbols</span><span class=\"p\">(</span><span class=\"s1\">&#39;Iyy1 Iyy2&#39;</span><span class=\"p\">,</span> <span class=\"n\">real</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">const</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">Iyz1</span><span class=\"p\">,</span> <span class=\"n\">Iyz2</span> <span class=\"o\">=</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">symbols</span><span class=\"p\">(</span><span class=\"s1\">&#39;Iyz1 Iyz2&#39;</span><span class=\"p\">,</span> <span class=\"n\">real</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">const</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">Izz1</span><span class=\"p\">,</span> <span class=\"n\">Izz2</span> <span class=\"o\">=</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">symbols</span><span class=\"p\">(</span><span class=\"s1\">&#39;Izz1 Izz2&#39;</span><span class=\"p\">,</span> <span class=\"n\">real</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">const</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Create symbolic variables which can be used in the equations for the robot definition later. The most common symbols are also already present in the <code>skidy.symbols</code> package and may be imported from there instead.</p>\n\n<hr />\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"c1\"># Define connectivity graph</span>\n<span class=\"n\">parent</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n          <span class=\"mi\">1</span><span class=\"p\">]</span>\n\n<span class=\"n\">child</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"mi\">1</span><span class=\"p\">],</span>\n         <span class=\"p\">[]]</span>\n\n<span class=\"n\">support</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"mi\">1</span><span class=\"p\">],</span>\n           <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">]]</span>\n\n<span class=\"n\">ee_parent</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n</code></pre>\n</div>\n\n<p>Connectivity graph of the robot. The parameters are generated to represent a serial robot by default. Modify parameters for tree-like structures. For serial robots these parameters are optional.</p>\n\n<ul>\n<li><strong>parent</strong>: list of parent links for any joint. Use 0 for World.</li>\n<li><strong>child</strong>: list of lists with child links for any link. Use empty list if no child is present.</li>\n<li><strong>support</strong>: list of lists with all support links beginning with first link including current link for any link.</li>\n<li><strong>ee_parent</strong>: parent joint index for end-effector link. Defaults to last link. For robots with more than one end-effector you can use a list of indices instead e.g.: <code>ee_parent = [1,2]</code>. Note, that this requires a list of end_effector transforms in <code>ee</code>.</li>\n</ul>\n\n<hr />\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"c1\"># gravity vector</span>\n<span class=\"n\">gravity</span> <span class=\"o\">=</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">Matrix</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"n\">g</span><span class=\"p\">])</span>\n</code></pre>\n</div>\n\n<p>Gravity vector as <code>sympy.Matrix</code>. Note that we can use symbolic variables here.</p>\n\n<hr />\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"c1\"># representation of joint screw coordinates and body reference configurations</span>\n<span class=\"n\">representation</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;spatial&#39;</span> <span class=\"c1\"># alternative: &#39;body_fixed&#39;</span>\n</code></pre>\n</div>\n\n<p>Define whether the representation of the joint screw coordinates and the body reference configuration is w.r.t. world frame (<code>representation = 'spatial'</code>) or in body fixed coordinates (<code>representation =  'body_fixed'</code>).</p>\n\n<hr />\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"c1\"># joint screw coordinates (6x1 sympy.Matrix per joint)</span>\n<span class=\"n\">joint_screw_coord</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"n\">joint_screw_coord</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">joint_screw</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">vec</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">revolute</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n<span class=\"n\">joint_screw_coord</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">joint_screw</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">revolute</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p>The joint screw coordinates can be defined either using the syntax which is used above, where <code>axis</code> is the joint axis, <code>vec</code> is a vector from the origin to the joint axis and <code>revolute</code> has to be <code>True</code> for revolute joints and <code>False</code> for prismatic joints. Note that prismatic joints don't need the parameter <code>vec</code>.\nAlternatively, you can directly use the 6D joint screw vectors instead:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">joint_screw_coord</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"n\">joint_screw_coord</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">Matrix</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">]))</span>\n<span class=\"n\">joint_screw_coord</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">Matrix</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]))</span>\n</code></pre>\n</div>\n\n<hr />\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"c1\"># body reference configurations (4x4 SE3 Pose (sympy.Matrix) per link)</span>\n<span class=\"n\">body_ref_config</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"n\">body_ref_config</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">transformation_matrix</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"o\">=</span><span class=\"n\">SO3Exp</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],</span><span class=\"n\">angle</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">),</span><span class=\"n\">t</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">]))</span>\n<span class=\"n\">body_ref_config</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">transformation_matrix</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"o\">=</span><span class=\"n\">SO3Exp</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],</span><span class=\"n\">angle</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">),</span><span class=\"n\">t</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">]))</span>\n</code></pre>\n</div>\n\n<p>The body reference configuration is a list of SE(3) transformation matrices. To define them you have several options:</p>\n\n<ol>\n<li><p>Write down the whole matrix e.g.:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">body_ref_config</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span>\n    <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">Matrix</span><span class=\"p\">([[</span><span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">pi</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">),</span><span class=\"o\">-</span><span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">pi</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">),</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n                  <span class=\"p\">[</span><span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">pi</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">pi</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">),</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n                  <span class=\"p\">[</span>              <span class=\"mi\">0</span><span class=\"p\">,</span>               <span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">L1</span><span class=\"p\">],</span>\n                  <span class=\"p\">[</span>              <span class=\"mi\">0</span><span class=\"p\">,</span>               <span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]])</span>\n<span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Note: this example assumes you have defined the symbolic variable <code>L1</code> before.</p></li>\n<li><p>Write rotation and translation separately:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">body_ref_config</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span>\n    <span class=\"n\">transformation_matrix</span><span class=\"p\">(</span>\n        <span class=\"n\">r</span><span class=\"o\">=</span><span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">Matrix</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n                        <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n                        <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]]),</span>\n        <span class=\"n\">t</span><span class=\"o\">=</span><span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">Matrix</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"n\">L1</span><span class=\"p\">])</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre>\n</div></li>\n<li><p>Use axis angle representation for rotation:\n-> See code above.</p></li>\n<li><p>For zero rotations or translations it is possible to omit the option:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">body_ref_config</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">transformation_matrix</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">]))</span>\n</code></pre>\n</div></li>\n<li><p>Use xyz_rpy coordinates to define Pose:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">body_ref_config</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">xyz_rpy_to_matrix</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">L1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">pi</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]))</span>\n</code></pre>\n</div>\n\n<p>Note that you have to import the function using <code>from skidy import xyz_rpy_to_matrix</code>.</p></li>\n<li><p>Use roll pitch yaw (rpy) euler angles to define rotation:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">body_ref_config</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span>\n    <span class=\"n\">transformation_matrix</span><span class=\"p\">(</span>\n        <span class=\"n\">r</span><span class=\"o\">=</span><span class=\"n\">rpy_to_matrix</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">pi</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]),</span>\n        <span class=\"n\">t</span><span class=\"o\">=</span><span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">Matrix</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"n\">L1</span><span class=\"p\">])</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Note that you have to import the function using <code>from skidy import rpy_to_matrix</code>.</p></li>\n<li><p>Use quaternion [w,x,y,z] to define rotation:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">body_ref_config</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span>\n    <span class=\"n\">transformation_matrix</span><span class=\"p\">(</span>\n        <span class=\"n\">r</span><span class=\"o\">=</span><span class=\"n\">quaternion_to_matrix</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">]),</span>\n        <span class=\"n\">t</span><span class=\"o\">=</span><span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">Matrix</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"n\">L1</span><span class=\"p\">])</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Note that you have to import the function using <code>from skidy import quaternion_to_matrix</code>.</p></li>\n</ol>\n\n<hr />\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"c1\"># end-effector configuration w.r.t. last link body fixed frame in the chain (4x4 SE3 Pose (sympy.Matrix))</span>\n<span class=\"n\">ee</span> <span class=\"o\">=</span> <span class=\"n\">transformation_matrix</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"o\">=</span><span class=\"n\">SO3Exp</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],</span><span class=\"n\">angle</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">),</span><span class=\"n\">t</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n</code></pre>\n</div>\n\n<p>End-effector representation w.r.t. last link body frame in the chain as SE(3) transformation matrix. Here you have the same syntax options as for the body reference configuration.\nFor robots with more than one end-effector you can use a list of transforms instead. This requires a list of parent joint indices for the parameter <code>ee_parent</code>.</p>\n\n<hr />\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"c1\"># mass_inertia parameters (6x6 sympy.Matrix per link)</span>\n<span class=\"n\">Mb</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"n\">Mb</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">mass_matrix_mixed_data</span><span class=\"p\">(</span><span class=\"n\">m1</span><span class=\"p\">,</span> <span class=\"n\">inertia_matrix</span><span class=\"p\">(</span><span class=\"n\">Ixx1</span><span class=\"p\">,</span><span class=\"n\">Ixy1</span><span class=\"p\">,</span><span class=\"n\">Ixz1</span><span class=\"p\">,</span><span class=\"n\">Iyy1</span><span class=\"p\">,</span><span class=\"n\">Iyz1</span><span class=\"p\">,</span><span class=\"n\">Izz1</span><span class=\"p\">),</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">Matrix</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">])))</span>\n<span class=\"n\">Mb</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">mass_matrix_mixed_data</span><span class=\"p\">(</span><span class=\"n\">m2</span><span class=\"p\">,</span> <span class=\"n\">inertia_matrix</span><span class=\"p\">(</span><span class=\"n\">Ixx2</span><span class=\"p\">,</span><span class=\"n\">Ixy2</span><span class=\"p\">,</span><span class=\"n\">Ixz2</span><span class=\"p\">,</span><span class=\"n\">Iyy2</span><span class=\"p\">,</span><span class=\"n\">Iyz2</span><span class=\"p\">,</span><span class=\"n\">Izz2</span><span class=\"p\">),</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">Matrix</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">])))</span>\n</code></pre>\n</div>\n\n<p>Mass-inertia matrices of all links. For the definition you have the following syntax options:</p>\n\n<ol>\n<li><p>Write down whole matrix:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">Mb</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span>\n    <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">Matrix</span><span class=\"p\">([[</span>   <span class=\"n\">Ixx1</span><span class=\"p\">,</span>    <span class=\"n\">Ixy1</span><span class=\"p\">,</span>    <span class=\"n\">Ixz1</span><span class=\"p\">,</span>       <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"n\">cz1</span><span class=\"o\">*</span><span class=\"n\">m1</span><span class=\"p\">,</span>  <span class=\"n\">cy1</span><span class=\"o\">*</span><span class=\"n\">m1</span><span class=\"p\">],</span>\n                  <span class=\"p\">[</span>   <span class=\"n\">Ixy1</span><span class=\"p\">,</span>    <span class=\"n\">Iyy1</span><span class=\"p\">,</span>    <span class=\"n\">Iyz1</span><span class=\"p\">,</span>  <span class=\"n\">cz1</span><span class=\"o\">*</span><span class=\"n\">m1</span><span class=\"p\">,</span>       <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"n\">cx1</span><span class=\"o\">*</span><span class=\"n\">m1</span><span class=\"p\">],</span>\n                  <span class=\"p\">[</span>   <span class=\"n\">Ixz1</span><span class=\"p\">,</span>    <span class=\"n\">Iyz1</span><span class=\"p\">,</span>    <span class=\"n\">Izz1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"n\">cy1</span><span class=\"o\">*</span><span class=\"n\">m1</span><span class=\"p\">,</span>  <span class=\"n\">cx1</span><span class=\"o\">*</span><span class=\"n\">m1</span><span class=\"p\">,</span>       <span class=\"mi\">0</span><span class=\"p\">],</span>\n                  <span class=\"p\">[</span>      <span class=\"mi\">0</span><span class=\"p\">,</span>  <span class=\"n\">cz1</span><span class=\"o\">*</span><span class=\"n\">m1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"n\">cy1</span><span class=\"o\">*</span><span class=\"n\">m1</span><span class=\"p\">,</span>      <span class=\"n\">m1</span><span class=\"p\">,</span>       <span class=\"mi\">0</span><span class=\"p\">,</span>       <span class=\"mi\">0</span><span class=\"p\">],</span>\n                  <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">cz1</span><span class=\"o\">*</span><span class=\"n\">m1</span><span class=\"p\">,</span>       <span class=\"mi\">0</span><span class=\"p\">,</span>  <span class=\"n\">cx1</span><span class=\"o\">*</span><span class=\"n\">m1</span><span class=\"p\">,</span>       <span class=\"mi\">0</span><span class=\"p\">,</span>      <span class=\"n\">m1</span><span class=\"p\">,</span>       <span class=\"mi\">0</span><span class=\"p\">],</span>\n                  <span class=\"p\">[</span> <span class=\"n\">cy1</span><span class=\"o\">*</span><span class=\"n\">m1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"n\">cx1</span><span class=\"o\">*</span><span class=\"n\">m1</span><span class=\"p\">,</span>       <span class=\"mi\">0</span><span class=\"p\">,</span>       <span class=\"mi\">0</span><span class=\"p\">,</span>       <span class=\"mi\">0</span><span class=\"p\">,</span>      <span class=\"n\">m1</span><span class=\"p\">]])</span>\n<span class=\"p\">)</span>\n</code></pre>\n</div></li>\n<li><p>Define mass, inertia matrix and center of mass separately:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">Mb</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span>\n    <span class=\"n\">mass_matrix_mixed_data</span><span class=\"p\">(</span>\n        <span class=\"n\">m1</span><span class=\"p\">,</span>\n        <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">Matrix</span><span class=\"p\">([[</span><span class=\"n\">Ixx1</span><span class=\"p\">,</span><span class=\"n\">Ixy1</span><span class=\"p\">,</span><span class=\"n\">Ixz1</span><span class=\"p\">],</span>\n                      <span class=\"p\">[</span><span class=\"n\">Ixy1</span><span class=\"p\">,</span><span class=\"n\">Iyy1</span><span class=\"p\">,</span><span class=\"n\">Iyz1</span><span class=\"p\">],</span>\n                      <span class=\"p\">[</span><span class=\"n\">Ixz1</span><span class=\"p\">,</span><span class=\"n\">Iyz1</span><span class=\"p\">,</span><span class=\"n\">Izz1</span><span class=\"p\">]]),</span>\n        <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">Matrix</span><span class=\"p\">([</span><span class=\"n\">cx1</span><span class=\"p\">,</span><span class=\"n\">cy1</span><span class=\"p\">,</span><span class=\"n\">cz1</span><span class=\"p\">])</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre>\n</div></li>\n<li><p>Only define the 6 independent inertia parameters:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">Mb</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span>\n    <span class=\"n\">mass_matrix_mixed_data</span><span class=\"p\">(</span>\n        <span class=\"n\">m1</span><span class=\"p\">,</span>\n        <span class=\"n\">inertia_matrix</span><span class=\"p\">(</span><span class=\"n\">Ixx1</span><span class=\"p\">,</span><span class=\"n\">Ixy1</span><span class=\"p\">,</span><span class=\"n\">Ixz1</span><span class=\"p\">,</span><span class=\"n\">Iyy1</span><span class=\"p\">,</span><span class=\"n\">Iyz1</span><span class=\"p\">,</span><span class=\"n\">Izz1</span><span class=\"p\">),</span>\n        <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">Matrix</span><span class=\"p\">([</span><span class=\"n\">cx1</span><span class=\"p\">,</span><span class=\"n\">cy1</span><span class=\"p\">,</span><span class=\"n\">cz1</span><span class=\"p\">])</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre>\n</div></li>\n<li><p>Automatically generate symbols in inertia matrix:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">Mb</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span>\n    <span class=\"n\">mass_matrix_mixed_data</span><span class=\"p\">(</span>\n        <span class=\"n\">m1</span><span class=\"p\">,</span>\n        <span class=\"n\">symbolic_inertia_matrix</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">pointmass</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">),</span>\n        <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">Matrix</span><span class=\"p\">([</span><span class=\"n\">cx1</span><span class=\"p\">,</span><span class=\"n\">cy1</span><span class=\"p\">,</span><span class=\"n\">cz1</span><span class=\"p\">])</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>where <code>symbolic_inertia_matrix(index=1, pointmass=False)</code> auto generates the variables <code>Ixx1</code>, <code>Ixy1</code>, etc. and creates a <code>sympy.Matrix</code> from it.\nWith the parameter <code>pointmass=True</code> the resulting inertia matrix looks like this instead:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">Matrix</span><span class=\"p\">([[</span><span class=\"n\">I1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n              <span class=\"p\">[</span> <span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"n\">I1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n              <span class=\"p\">[</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"n\">I1</span><span class=\"p\">]])</span>\n</code></pre>\n</div>\n\n<p>Note that you have to import the function using <code>from skidy import symbolic_inertia_matrix</code>.</p></li>\n</ol>\n\n<hr />\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"n\">qd</span><span class=\"p\">,</span> <span class=\"n\">q2d</span> <span class=\"o\">=</span> <span class=\"n\">generalized_vectors</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">body_ref_config</span><span class=\"p\">),</span> <span class=\"n\">startindex</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Generate the generalized vectors (joint positions <code>q</code>, joint velocities <code>qd</code> and joint accelerations <code>q2d</code>). The symbols are auto generated starting at index <code>startindex</code>. The degrees of freedom in this case are taken from the length of <code>body_ref_config</code>.</p>\n\n<p>The equivalent code would be:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">q1</span><span class=\"p\">,</span> <span class=\"n\">q2</span> <span class=\"o\">=</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">symbols</span><span class=\"p\">(</span><span class=\"s2\">&quot;q1 d2&quot;</span><span class=\"p\">,</span> <span class=\"n\">real</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">constant</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">dq1</span><span class=\"p\">,</span> <span class=\"n\">dq2</span> <span class=\"o\">=</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">symbols</span><span class=\"p\">(</span><span class=\"s2\">&quot;dq1 dd2&quot;</span><span class=\"p\">,</span> <span class=\"n\">real</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">constant</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">ddq1</span><span class=\"p\">,</span> <span class=\"n\">ddq2</span> <span class=\"o\">=</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">symbols</span><span class=\"p\">(</span><span class=\"s2\">&quot;ddq1 ddq2&quot;</span><span class=\"p\">,</span> <span class=\"n\">real</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">constant</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">Matrix</span><span class=\"p\">([</span><span class=\"n\">q1</span><span class=\"p\">,</span><span class=\"n\">q2</span><span class=\"p\">])</span>\n<span class=\"n\">qd</span> <span class=\"o\">=</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">Matrix</span><span class=\"p\">([</span><span class=\"n\">dq1</span><span class=\"p\">,</span><span class=\"n\">dq2</span><span class=\"p\">])</span>\n<span class=\"n\">q2d</span> <span class=\"o\">=</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">Matrix</span><span class=\"p\">([</span><span class=\"n\">ddq1</span><span class=\"p\">,</span><span class=\"n\">ddq2</span><span class=\"p\">])</span>\n</code></pre>\n</div>\n\n<p>To generate jerk and jounce as well, use:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"n\">qd</span><span class=\"p\">,</span> <span class=\"n\">q2d</span><span class=\"p\">,</span> <span class=\"n\">q3d</span><span class=\"p\">,</span> <span class=\"n\">q4d</span> <span class=\"o\">=</span> <span class=\"n\">generalized_vectors</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">body_ref_config</span><span class=\"p\">),</span> <span class=\"n\">startindex</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">derivatives</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<hr />\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">WEE</span> <span class=\"o\">=</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Define the time varying wrench on the end-effector link. Should be a (6,1) sympy.Matrix with symbolic variables, e.g.: <code>sympy.Matrix([Mx,My,Mz,Fx,Fy,Fz])</code>.</p>\n\n<p>Optionally, you can define the time derivatives <code>WDEE</code> and <code>W2DEE</code> here too. E.g.:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">WEE</span> <span class=\"o\">=</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">Matrix</span><span class=\"p\">([</span><span class=\"n\">Mx</span><span class=\"p\">,</span><span class=\"n\">My</span><span class=\"p\">,</span><span class=\"n\">Mz</span><span class=\"p\">,</span><span class=\"n\">Fx</span><span class=\"p\">,</span><span class=\"n\">Fy</span><span class=\"p\">,</span><span class=\"n\">Fz</span><span class=\"p\">])</span>\n<span class=\"n\">WDEE</span> <span class=\"o\">=</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">Matrix</span><span class=\"p\">([</span><span class=\"n\">dMx</span><span class=\"p\">,</span><span class=\"n\">dMy</span><span class=\"p\">,</span><span class=\"n\">dMz</span><span class=\"p\">,</span><span class=\"n\">dFx</span><span class=\"p\">,</span><span class=\"n\">dFy</span><span class=\"p\">,</span><span class=\"n\">dFz</span><span class=\"p\">])</span>\n<span class=\"n\">W2DEE</span> <span class=\"o\">=</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">Matrix</span><span class=\"p\">([</span><span class=\"n\">ddMx</span><span class=\"p\">,</span><span class=\"n\">ddMy</span><span class=\"p\">,</span><span class=\"n\">ddMz</span><span class=\"p\">,</span><span class=\"n\">ddFx</span><span class=\"p\">,</span><span class=\"n\">ddFy</span><span class=\"p\">,</span><span class=\"n\">ddFz</span><span class=\"p\">])</span>\n</code></pre>\n</div>\n\n<p>If your robot has more than one end-effector, you have to use one external wrench per end-effector in a list, e.g.:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">WEE</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">Matrix</span><span class=\"p\">([</span><span class=\"n\">Mx1</span><span class=\"p\">,</span><span class=\"n\">My1</span><span class=\"p\">,</span><span class=\"n\">Mz1</span><span class=\"p\">,</span><span class=\"n\">Fx1</span><span class=\"p\">,</span><span class=\"n\">Fy1</span><span class=\"p\">,</span><span class=\"n\">Fz1</span><span class=\"p\">]),</span>\n       <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">Matrix</span><span class=\"p\">([</span><span class=\"n\">Mx2</span><span class=\"p\">,</span><span class=\"n\">My2</span><span class=\"p\">,</span><span class=\"n\">Mz2</span><span class=\"p\">,</span><span class=\"n\">Fx2</span><span class=\"p\">,</span><span class=\"n\">Fy2</span><span class=\"p\">,</span><span class=\"n\">Fz2</span><span class=\"p\">])]</span>\n</code></pre>\n</div>\n\n<hr />\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">skd</span> <span class=\"o\">=</span> <span class=\"n\">SymbolicKinDyn</span><span class=\"p\">(</span><span class=\"n\">gravity_vector</span><span class=\"o\">=</span><span class=\"n\">gravity</span><span class=\"p\">,</span>\n                     <span class=\"n\">ee</span><span class=\"o\">=</span><span class=\"n\">ee</span><span class=\"p\">,</span>\n                     <span class=\"n\">body_ref_config</span><span class=\"o\">=</span><span class=\"n\">body_ref_config</span><span class=\"p\">,</span>\n                     <span class=\"n\">joint_screw_coord</span><span class=\"o\">=</span><span class=\"n\">joint_screw_coord</span><span class=\"p\">,</span>\n                     <span class=\"n\">config_representation</span><span class=\"o\">=</span><span class=\"n\">representation</span><span class=\"p\">,</span>\n                     <span class=\"n\">Mb</span><span class=\"o\">=</span><span class=\"n\">Mb</span><span class=\"p\">,</span>\n                     <span class=\"n\">parent</span><span class=\"o\">=</span><span class=\"n\">parent</span><span class=\"p\">,</span>\n                     <span class=\"n\">child</span><span class=\"o\">=</span><span class=\"n\">child</span><span class=\"p\">,</span>\n                     <span class=\"n\">support</span><span class=\"o\">=</span><span class=\"n\">support</span><span class=\"p\">,</span>\n                     <span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Initialize class with all defined parameters.</p>\n\n<hr />\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"c1\"># run Calculations</span>\n<span class=\"n\">skd</span><span class=\"o\">.</span><span class=\"n\">closed_form_kinematics_body_fixed</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"n\">qd</span><span class=\"p\">,</span> <span class=\"n\">q2d</span><span class=\"p\">,</span> <span class=\"n\">simplify</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">skd</span><span class=\"o\">.</span><span class=\"n\">closed_form_inv_dyn_body_fixed</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"n\">qd</span><span class=\"p\">,</span> <span class=\"n\">q2d</span><span class=\"p\">,</span> <span class=\"n\">WEE</span><span class=\"o\">=</span><span class=\"n\">WEE</span><span class=\"p\">,</span> <span class=\"n\">simplify</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Generate forward kinematics and inverse dynamics equations. Both functions share the following arguments:</p>\n\n<ul>\n<li>simplify: generated expressions are simplified. Note that the simplification takes a lot of time for robots with more than 2 revolute joints in a chain.</li>\n<li>cse: Use common subexpression elimination to shorten equations. Note that the equations are not human-readable afterwards.</li>\n<li>parallel: use parallel computation.</li>\n</ul>\n\n<p><code>skd.closed_form_kinematics_body_fixed</code> generates the following equations and saves them as class parameters:</p>\n\n<ul>\n<li>body_acceleration</li>\n<li>body_acceleration_ee</li>\n<li>body_jacobian_matrix</li>\n<li>body_jacobian_matrix_dot</li>\n<li>body_jacobian_matrix_ee</li>\n<li>body_jacobian_matrix_ee_dot</li>\n<li>body_twist_ee</li>\n<li>forward_kinematics</li>\n<li>hybrid_acceleration</li>\n<li>hybrid_acceleration_ee</li>\n<li>hybrid_jacobian_matrix</li>\n<li>hybrid_jacobian_matrix_dot</li>\n<li>hybrid_jacobian_matrix_ee</li>\n<li>hybrid_jacobian_matrix_ee_dot</li>\n<li>hybrid_twist_ee</li>\n</ul>\n\n<p>and <code>skd.closed_form_inv_dyn_body_fixed</code> generates the following equations and saves them as class parameters:</p>\n\n<ul>\n<li>coriolis_centrifugal_matrix</li>\n<li>generalized_mass_inertia_matrix</li>\n<li>gravity_vector</li>\n<li>inverse_dynamics</li>\n</ul>\n\n<p>with provided generalized jerk and jounce vectors, <code>skd.closed_form_inv_dyn_body_fixed</code> additionally generates the following derivatives of the equation of motion:</p>\n\n<ul>\n<li>coriolis_centrifugal_matrix_dot</li>\n<li>generalized_mass_inertia_matrix_dot</li>\n<li>gravity_vector_dot</li>\n<li>inverse_dynamics_dot</li>\n<li>coriolis_centrifugal_matrix_ddot</li>\n<li>generalized_mass_inertia_matrix_ddot</li>\n<li>gravity_vector_ddot</li>\n<li>inverse_dynamics_ddot</li>\n</ul>\n\n<p><code>skd.closed_form_inv_dyn_body_fixed</code> takes the wrench <code>WEE</code> (6x1 sympy.Matrix) (tau,F) on the end-effector link and its time derivatives <code>WDEE</code> and <code>W2DEE</code> as optional additional arguments.</p>\n\n<p>To calculate the 1st and 2nd order time derivative of the EOM use e.g.:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">skd</span><span class=\"o\">.</span><span class=\"n\">closed_form_inv_dyn_body_fixed</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"n\">qd</span><span class=\"p\">,</span> <span class=\"n\">q2d</span><span class=\"p\">,</span> <span class=\"n\">q3d</span><span class=\"p\">,</span> <span class=\"n\">q4d</span><span class=\"p\">,</span> <span class=\"n\">WEE</span><span class=\"p\">,</span> <span class=\"n\">WDEE</span><span class=\"p\">,</span> <span class=\"n\">W2DEE</span><span class=\"p\">,</span> <span class=\"n\">simplify</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<hr />\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"c1\"># Generate Code</span>\n<span class=\"n\">skd</span><span class=\"o\">.</span><span class=\"n\">generate_code</span><span class=\"p\">(</span><span class=\"n\">python</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">C</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">Matlab</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">latex</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                 <span class=\"n\">folder</span><span class=\"o\">=</span><span class=\"s2\">&quot;./generated_code&quot;</span><span class=\"p\">,</span> <span class=\"n\">use_global_vars</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                 <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;plant&quot;</span><span class=\"p\">,</span> <span class=\"n\">project</span><span class=\"o\">=</span><span class=\"s2\">&quot;Project&quot;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Generate Python, Matlab, C (C99), Julia, Cython and/or LaTeX code from the generated equations.\nNote that this can take some time, especially for non-simplified equations and complex robots.</p>\n\n<h3 id=\"23-urdf\">2.3. URDF</h3>\n\n<p>URDF files are currently only supported in combination with a python script. But there is a function to generate a template python file, which loads your URDF. In the python file it is necessary to define:</p>\n\n<ol>\n<li>the URDF path</li>\n<li>the gravity vector</li>\n<li>end-effector configuration w.r.t. last link body fixed frame in the chain</li>\n</ol>\n\n<p>To generate the python template file use:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>python<span class=\"w\"> </span>-m<span class=\"w\"> </span>skidy<span class=\"w\"> </span>--template<span class=\"w\"> </span>--urdf<span class=\"w\"> </span>my_urdf_template.py\n</code></pre>\n</div>\n\n<p>or the python function <code>skidy.generate_template_python(path, urdf=True)</code>.</p>\n\n<p>This generates the following output:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">skidy</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">SymbolicKinDyn</span><span class=\"p\">,</span>\n                   <span class=\"n\">transformation_matrix</span><span class=\"p\">,</span>\n                   <span class=\"n\">SO3Exp</span><span class=\"p\">,</span>\n                   <span class=\"n\">generalized_vectors</span><span class=\"p\">)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">skidy.symbols</span> <span class=\"kn\">import</span> <span class=\"n\">g</span><span class=\"p\">,</span> <span class=\"n\">pi</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sympy</span>\n\n<span class=\"c1\"># Define symbols:</span>\n<span class=\"n\">lee</span> <span class=\"o\">=</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">symbols</span><span class=\"p\">(</span><span class=\"s1\">&#39;lee&#39;</span><span class=\"p\">,</span> <span class=\"n\">real</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">const</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"n\">urdfpath</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;/path/to/robot.urdf&#39;</span> <span class=\"c1\"># TODO: change me!</span>\n\n<span class=\"c1\"># gravity vector</span>\n<span class=\"n\">gravity</span> <span class=\"o\">=</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">Matrix</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"n\">g</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># end-effector configuration w.r.t. last link body fixed frame in the chain</span>\n<span class=\"n\">ee</span> <span class=\"o\">=</span> <span class=\"n\">transformation_matrix</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"o\">=</span><span class=\"n\">SO3Exp</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],</span><span class=\"n\">angle</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">),</span><span class=\"n\">t</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n\n<span class=\"n\">skd</span> <span class=\"o\">=</span> <span class=\"n\">SymbolicKinDyn</span><span class=\"p\">(</span><span class=\"n\">gravity_vector</span><span class=\"o\">=</span><span class=\"n\">gravity</span><span class=\"p\">,</span>\n                     <span class=\"n\">ee</span><span class=\"o\">=</span><span class=\"n\">ee</span><span class=\"p\">,</span>\n                     <span class=\"p\">)</span>\n\n<span class=\"n\">skd</span><span class=\"o\">.</span><span class=\"n\">load_from_urdf</span><span class=\"p\">(</span><span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">urdfpath</span><span class=\"p\">,</span>\n                   <span class=\"n\">symbolic</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> \n                   <span class=\"n\">cse</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> \n                   <span class=\"n\">simplify_numbers</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>  \n                   <span class=\"n\">tolerance</span><span class=\"o\">=</span><span class=\"mf\">0.0001</span><span class=\"p\">,</span> \n                   <span class=\"n\">max_denominator</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">,</span> \n                   <span class=\"p\">)</span>\n\n<span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"n\">qd</span><span class=\"p\">,</span> <span class=\"n\">q2d</span> <span class=\"o\">=</span> <span class=\"n\">generalized_vectors</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">skd</span><span class=\"o\">.</span><span class=\"n\">body_ref_config</span><span class=\"p\">),</span> <span class=\"n\">startindex</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">WEE</span> <span class=\"o\">=</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># run Calculations</span>\n<span class=\"n\">skd</span><span class=\"o\">.</span><span class=\"n\">closed_form_kinematics_body_fixed</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"n\">qd</span><span class=\"p\">,</span> <span class=\"n\">q2d</span><span class=\"p\">,</span> <span class=\"n\">simplify</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">skd</span><span class=\"o\">.</span><span class=\"n\">closed_form_inv_dyn_body_fixed</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"n\">qd</span><span class=\"p\">,</span> <span class=\"n\">q2d</span><span class=\"p\">,</span> <span class=\"n\">WEE</span><span class=\"o\">=</span><span class=\"n\">WEE</span><span class=\"p\">,</span> <span class=\"n\">simplify</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Generate Code</span>\n<span class=\"n\">skd</span><span class=\"o\">.</span><span class=\"n\">generate_code</span><span class=\"p\">(</span><span class=\"n\">python</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">C</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">Matlab</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">latex</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                 <span class=\"n\">folder</span><span class=\"o\">=</span><span class=\"s2\">&quot;./generated_code&quot;</span><span class=\"p\">,</span> <span class=\"n\">use_global_vars</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                 <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;plant&quot;</span><span class=\"p\">,</span> <span class=\"n\">project</span><span class=\"o\">=</span><span class=\"s2\">&quot;Project&quot;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>The code explained:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">skidy</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">SymbolicKinDyn</span><span class=\"p\">,</span>\n                   <span class=\"n\">transformation_matrix</span><span class=\"p\">,</span>\n                   <span class=\"n\">SO3Exp</span><span class=\"p\">,</span>\n                   <span class=\"n\">generalized_vectors</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>The class <code>SymbolicKinDyn</code> is the main object for calculating the kinematic and dynamic equations of your robot and generate the code.\nAdditionally, we import several helper functions for defining the matrices which are useful for the robot definition:</p>\n\n<ul>\n<li><code>transformation_matrix</code>: Create SE(3) transformation matrix from SO(3) rotation and translation vector.</li>\n<li><code>SO3Exp</code>: Exponential mapping of SO(3) to generate rotation matrix from rotation angle and rotation axis.</li>\n<li><code>generalized_vectors</code>: generate symbolic generalized vectors q, qd and q2d of predefined length n.</li>\n</ul>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">skidy.symbols</span> <span class=\"kn\">import</span> <span class=\"n\">g</span><span class=\"p\">,</span> <span class=\"n\">pi</span>\n</code></pre>\n</div>\n\n<p>The package <code>skidy.symbols</code> includes the most common used symbolic variables, which can be used for defining your robot.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">sympy</span>\n</code></pre>\n</div>\n\n<p>The whole library used sympy objects for all symbolic equations etc. Hence, we need <code>sympy</code> to create additional symbolic variables and matrices later.</p>\n\n<hr />\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"c1\"># Define symbols:</span>\n<span class=\"n\">lee</span> <span class=\"o\">=</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">symbols</span><span class=\"p\">(</span><span class=\"s1\">&#39;lee&#39;</span><span class=\"p\">,</span> <span class=\"n\">real</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">const</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Create symbolic variables which can be used in the equations for the robot definition later. The most common symbols are also already present in the <code>skidy.symbols</code> package and may be imported from there instead.</p>\n\n<hr />\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">urdfpath</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;/path/to/robot.urdf&#39;</span> <span class=\"c1\"># TODO: change me!</span>\n</code></pre>\n</div>\n\n<p>Enter the path to your URDF file here.</p>\n\n<hr />\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"c1\"># gravity vector</span>\n<span class=\"n\">gravity</span> <span class=\"o\">=</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">Matrix</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"n\">g</span><span class=\"p\">])</span>\n</code></pre>\n</div>\n\n<p>Gravity vector as <code>sympy.Matrix</code>. Note that we can use symbolic variables here.</p>\n\n<hr />\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"c1\"># end-effector configuration w.r.t. last link body fixed frame in the chain</span>\n<span class=\"n\">ee</span> <span class=\"o\">=</span> <span class=\"n\">transformation_matrix</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"o\">=</span><span class=\"n\">SO3Exp</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],</span><span class=\"n\">angle</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">),</span><span class=\"n\">t</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n</code></pre>\n</div>\n\n<p>End-effector representation w.r.t. last link body frame in the chain as SE(3) transformation matrix. Look up the chapter <a href=\"#22-python\">Python</a> for all available syntax options.</p>\n\n<hr />\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">skd</span> <span class=\"o\">=</span> <span class=\"n\">SymbolicKinDyn</span><span class=\"p\">(</span><span class=\"n\">gravity_vector</span><span class=\"o\">=</span><span class=\"n\">gravity</span><span class=\"p\">,</span>\n                     <span class=\"n\">ee</span><span class=\"o\">=</span><span class=\"n\">ee</span><span class=\"p\">,</span>\n                     <span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Initialize class with the two defined parameters.</p>\n\n<hr />\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">skd</span><span class=\"o\">.</span><span class=\"n\">load_from_urdf</span><span class=\"p\">(</span><span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">urdfpath</span><span class=\"p\">,</span>\n                   <span class=\"n\">symbolic</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> \n                   <span class=\"n\">cse</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> \n                   <span class=\"n\">simplify_numbers</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>  \n                   <span class=\"n\">tolerance</span><span class=\"o\">=</span><span class=\"mf\">0.0001</span><span class=\"p\">,</span> \n                   <span class=\"n\">max_denominator</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">,</span> \n                   <span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Load the URDF file. Here you can specify the following options:</p>\n\n<ol>\n<li><code>symbolic</code>: symbolify values in urdf file (bool).</li>\n<li><code>cse</code>: use common subexpression elimination to shorten equations (bool).</li>\n<li><code>simplify_numbers</code>: round numbers if close to common fractions like 1/2 etc and replace eg 3.1416 by pi (bool).</li>\n<li><code>tolerance</code>: tolerance for simplify numbers.</li>\n<li><code>max_denominator</code>: define max denominator for simplify numbers to avoid simplification to something like 13/153. Use 0 to deactivate.</li>\n</ol>\n\n<hr />\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"n\">qd</span><span class=\"p\">,</span> <span class=\"n\">q2d</span> <span class=\"o\">=</span> <span class=\"n\">generalized_vectors</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">skd</span><span class=\"o\">.</span><span class=\"n\">body_ref_config</span><span class=\"p\">),</span> <span class=\"n\">startindex</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Generate the generalized vectors (joint positions <code>q</code>, joint velocities <code>qd</code> and joint accelerations <code>q2d</code>). The symbols are auto generated starting at index <code>startindex</code>. The degrees of freedom in this case are taken from the length of the parameter <code>skd.body_ref_config</code>, which was generated by the function <code>load_from_urdf</code>.</p>\n\n<hr />\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">WEE</span> <span class=\"o\">=</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Define the time varying wrench on the end-effector link. Should be a (6,1) sympy.Matrix with symbolic variables.</p>\n\n<hr />\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"c1\"># run Calculations</span>\n<span class=\"n\">skd</span><span class=\"o\">.</span><span class=\"n\">closed_form_kinematics_body_fixed</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"n\">qd</span><span class=\"p\">,</span> <span class=\"n\">q2d</span><span class=\"p\">,</span> <span class=\"n\">simplify</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">skd</span><span class=\"o\">.</span><span class=\"n\">closed_form_inv_dyn_body_fixed</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"n\">qd</span><span class=\"p\">,</span> <span class=\"n\">q2d</span><span class=\"p\">,</span> <span class=\"n\">WEE</span><span class=\"o\">=</span><span class=\"n\">WEE</span><span class=\"p\">,</span> <span class=\"n\">simplify</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Generate forward kinematics and inverse dynamics equations. See chapter <a href=\"#22-python\">Python</a> for more information.</p>\n\n<hr />\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"c1\"># Generate Code</span>\n<span class=\"n\">skd</span><span class=\"o\">.</span><span class=\"n\">generate_code</span><span class=\"p\">(</span><span class=\"n\">python</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">C</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">Matlab</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">latex</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                 <span class=\"n\">folder</span><span class=\"o\">=</span><span class=\"s2\">&quot;./generated_code&quot;</span><span class=\"p\">,</span> <span class=\"n\">use_global_vars</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                 <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;plant&quot;</span><span class=\"p\">,</span> <span class=\"n\">project</span><span class=\"o\">=</span><span class=\"s2\">&quot;Project&quot;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Generate Python, Matlab, C (C99), Julia, Cython and/or LaTeX code from the generated equations.\nNote that this can take time, especially for non-simplified equations and complex robots.</p>\n\n<h2 id=\"3-unit-testing\">3. Unit testing</h2>\n\n<p>To run the unit tests use:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>python3<span class=\"w\"> </span>./unit_testing/unit_testing.py\n</code></pre>\n</div>\n\n<h2 id=\"4-benchmarking\">4. Benchmarking</h2>\n\n<p>For benchmarking the project the script <code>benchmarking/benchmarking.py</code> was used. This script loads 4 robots with increasing complexity (1 to 4 revolute joint in a chain with planar task space) and takes the execution time of the functions <code>closed_form_kinematics_body_fixed()</code>, <code>closed_form_inv_dyn_body_fixed()</code> and <code>generate_code()</code>. Additionally, the arguments <code>parallel</code>, <code>simplify</code> and <code>cse</code> have been altered.\nThe results are shown in the following table:</p>\n\n<table>\n<thead>\n<tr>\n  <th style=\"text-align:left;\">arguments</th>\n  <th style=\"text-align:center;\">parallel</th>\n  <th style=\"text-align:center;\">serial</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td style=\"text-align:left;\">simplify</td>\n  <td style=\"text-align:center;\"><img src=\"/benchmarking/parallel_with_simplification_without_cse.png\" alt=\"1 dof: 0.65 s; 2 dof: 2.14 s; 3 dof: 8.77 s; 4 dof: 44.04 s\" /></td>\n  <td style=\"text-align:center;\"><img src=\"/benchmarking/serial_with_simplification_without_cse.png\" alt=\"1 dof: 0.16 s; 2 dof: 2.38 s; 3 dof: 13.06 s; 4 dof: 60.68 s\" /></td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\">simplify + cse</td>\n  <td style=\"text-align:center;\"><img src=\"/benchmarking/parallel_with_simplification_with_cse.png\" alt=\"1 dof: 0.56 s; 2 dof: 2.22 s; 3 dof: 12.86 s; 4 dof: 84.28 s\" /></td>\n  <td style=\"text-align:center;\"><img src=\"/benchmarking/serial_with_simplification_with_cse.png\" alt=\"1 dof: 0.22 s; 2 dof: 2.78 s; 3 dof: 18.49 s; 4 dof: 113.30 s\" /></td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\">no simplify</td>\n  <td style=\"text-align:center;\"><img src=\"/benchmarking/parallel_without_simplification_without_cse.png\" alt=\"1 dof: 0.74 s; 2 dof: 2.65 s; 3 dof: 11.29 s; 4 dof: 47.14 s\" /></td>\n  <td style=\"text-align:center;\"><img src=\"/benchmarking/serial_without_simplification_without_cse.png\" alt=\"1 dof: 0.08 s; 2 dof: 1.57 s; 3 dof: 9.51 s; 4 dof: 44.57 s\" /></td>\n</tr>\n<tr>\n  <td style=\"text-align:left;\">no simplify + cse</td>\n  <td style=\"text-align:center;\"><img src=\"/benchmarking/parallel_without_simplification_with_cse.png\" alt=\"1 dof: 0.80 s; 2 dof: 4.50 s; 3 dof: 29.13 s; 4 dof: 161.01 s\" /></td>\n  <td style=\"text-align:center;\"><img src=\"/benchmarking/serial_without_simplification_with_cse.png\" alt=\"1 dof: 0.08 s; 2 dof: 4.49 s; 3 dof: 37.74 s; 4 dof: 201.11 s\" /></td>\n</tr>\n</tbody>\n</table>\n\n<h2 id=\"5-license\">5. License</h2>\n\n<p>This work has been released under the BSD 3-Clause License. Details and terms of use are specified in the LICENSE file within this repository. Note that we do not publish third-party software, hence software packages from other developers are released under their very own terms and conditions. If you install third-party software packages along with this repo ensure that you follow each individual license agreement.</p>\n"}, {"fullname": "skidy.kinematics_generator", "modulename": "skidy.kinematics_generator", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "skidy.kinematics_generator.SymbolicKinDyn", "modulename": "skidy.kinematics_generator", "qualname": "SymbolicKinDyn", "kind": "class", "doc": "<p></p>\n", "bases": "_AbstractCodeGeneration"}, {"fullname": "skidy.kinematics_generator.SymbolicKinDyn.__init__", "modulename": "skidy.kinematics_generator", "qualname": "SymbolicKinDyn.__init__", "kind": "function", "doc": "<p>SymbolicKinDyn\nSymbolic tool to compute equations of motion of serial chain \nrobots and autogenerate code from the calculated equations. \nThis tool supports generation of python, C and Matlab code.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>gravity_vector (sympy.Matrix, optional):</strong>   Vector of gravity. Defaults to None.</li>\n<li><strong>ee (sympy.Matrix | list of sympy.Matrix, optional):</strong>   End-effector configuration with reference to last link \nbody fixed frame in the chain. This link can be selected \nmanually using the parameter ee_parent. \nIf there is more than one end-effector use a list of \ntransforms instead.\nDefaults to None.</li>\n<li><strong>body_ref_config (list of sympy.Matrix, optional):</strong>   List of reference configurations of bodies in body-fixed\nor spatial representation, dependent on selected \nconfig_representation. \nLeave empty for dH Parameter usage (dhToScrewCoord(...)). \nDefaults to [].</li>\n<li><strong>joint_screw_coord (list of sympy.Matrix, optional):</strong>   List of joint screw coordinates in body-fixed \nor spatial representation, dependent on selected \nconfig_representation. \nLeave empty for dH Parameter usage (dhToScrewCoord(...)). \nDefaults to [].</li>\n<li><strong>config_representation (str, optional):</strong>   Use body fixed or spatial representation for reference \nconfiguration of bodies and joint screw coordinates.\nHas to be \"body_fixed\" or \"spatial\". \nDefaults to \"spatial\".</li>\n<li><strong>Mb (list of sympy.Matrix, optional):</strong>   List of Mass Inertia matrices for all links. Only \nnecessary for inverse dynamics. Defaults to [].</li>\n<li><strong>parent (list, optional):</strong>   list of parent link indices for any joint. Use 0 for world.\nOnly necessary for tree-like robot structures. \nDefaults to [].</li>\n<li><strong>support (list, optional):</strong>   list of lists with one list per link which includes all \nsupport links beginning with the first link in the chain \nand including the current link.\nOnly necessary for tree-like robot structures. \nDefaults to [].</li>\n<li><strong>child (list, optional):</strong>   list of lists with one list per link which includes all\nchild links. Use empty list if no child link is present.\nOnly necessary for tree-like robot structures. \nDefaults to [].</li>\n<li><strong>ee_parent (int | list, optional):</strong>   parent link of the end effector frame. If there is more \nthan one end-effector, use a list of indices instead.\nDefaults to None (= last link).</li>\n<li><strong>q (sympy.Matrix, optional):</strong>   (n,1) Generalized position vector. Defaults to None.</li>\n<li><strong>qd (sympy.Matrix, optional):</strong>   (n,1) Generalized velocity vector. Defaults to None.</li>\n<li><strong>q2d (sympy.Matrix, optional):</strong>   (n,1) Generalized acceleration vector. Defaults to None.</li>\n<li><strong>q3d (sympy.Matrix, optional):</strong>   (n,1) Generalized jerk vector. Defaults to None.</li>\n<li><strong>q4d (sympy.Matrix, optional):</strong>   (n,1) Generalized jounce vector. Defaults to None.</li>\n<li><strong>WEE (sympy.Matrix | list, optional):</strong>   (6,1) WEE (t) = [Mx,My,Mz,Fx,Fy,Fz] is the time varying \nwrench on the EE link. \nIf there is more than one end-effector, you can use a \nlist containing all wrenches instead.\nDefaults to zeros(6, 1).</li>\n<li><strong>WDEE (sympy.Matrix | list, optional):</strong>   (6,1) WDEE (t) = [dMx,dMy,dMz,dFx,dFy,dFz] is the derivative \nof the time varying wrench on the EE link. \nIf there is more than one end-effector, you can use a \nlist containing all wrenches instead.\nDefaults to zeros(6, 1).</li>\n<li><strong>W2DEE (sympy.Matrix | list, optional):</strong>   (6,1) W2DEE (t) = [ddMx,ddMy,ddMz,ddFx,ddFy,ddFz] is the \n2nd derivative of the time varying wrench on the EE link. \nIf there is more than one end-effector, you can use a \nlist containing all wrenches instead.\nDefaults to zeros(6, 1).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">gravity_vector</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"o\">.</span><span class=\"n\">dense</span><span class=\"o\">.</span><span class=\"n\">MutableDenseMatrix</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ee</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"o\">.</span><span class=\"n\">dense</span><span class=\"o\">.</span><span class=\"n\">MutableDenseMatrix</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"o\">.</span><span class=\"n\">dense</span><span class=\"o\">.</span><span class=\"n\">MutableDenseMatrix</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">body_ref_config</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"o\">.</span><span class=\"n\">dense</span><span class=\"o\">.</span><span class=\"n\">MutableDenseMatrix</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">joint_screw_coord</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"o\">.</span><span class=\"n\">dense</span><span class=\"o\">.</span><span class=\"n\">MutableDenseMatrix</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">config_representation</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;spatial&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">Mb</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"o\">.</span><span class=\"n\">dense</span><span class=\"o\">.</span><span class=\"n\">MutableDenseMatrix</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">parent</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">support</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">child</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">ee_parent</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">q</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"o\">.</span><span class=\"n\">dense</span><span class=\"o\">.</span><span class=\"n\">MutableDenseMatrix</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">qd</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"o\">.</span><span class=\"n\">dense</span><span class=\"o\">.</span><span class=\"n\">MutableDenseMatrix</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">q2d</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"o\">.</span><span class=\"n\">dense</span><span class=\"o\">.</span><span class=\"n\">MutableDenseMatrix</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">q3d</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"o\">.</span><span class=\"n\">dense</span><span class=\"o\">.</span><span class=\"n\">MutableDenseMatrix</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">q4d</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"o\">.</span><span class=\"n\">dense</span><span class=\"o\">.</span><span class=\"n\">MutableDenseMatrix</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">WEE</span><span class=\"p\">:</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"o\">.</span><span class=\"n\">dense</span><span class=\"o\">.</span><span class=\"n\">MutableDenseMatrix</span> <span class=\"o\">|</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"o\">.</span><span class=\"n\">dense</span><span class=\"o\">.</span><span class=\"n\">MutableDenseMatrix</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Matrix</span><span class=\"p\">([</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]])</span>,</span><span class=\"param\">\t<span class=\"n\">WDEE</span><span class=\"p\">:</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"o\">.</span><span class=\"n\">dense</span><span class=\"o\">.</span><span class=\"n\">MutableDenseMatrix</span> <span class=\"o\">|</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"o\">.</span><span class=\"n\">dense</span><span class=\"o\">.</span><span class=\"n\">MutableDenseMatrix</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Matrix</span><span class=\"p\">([</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]])</span>,</span><span class=\"param\">\t<span class=\"n\">W2DEE</span><span class=\"p\">:</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"o\">.</span><span class=\"n\">dense</span><span class=\"o\">.</span><span class=\"n\">MutableDenseMatrix</span> <span class=\"o\">|</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"o\">.</span><span class=\"n\">dense</span><span class=\"o\">.</span><span class=\"n\">MutableDenseMatrix</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Matrix</span><span class=\"p\">([</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]])</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "skidy.kinematics_generator.SymbolicKinDyn.closed_form_kinematics_body_fixed", "modulename": "skidy.kinematics_generator", "qualname": "SymbolicKinDyn.closed_form_kinematics_body_fixed", "kind": "function", "doc": "<p>Position, Velocity and Acceleration Kinematics using Body \nfixed representation of the twists in closed form.</p>\n\n<p>The following expressions are saved in the class and can be \ncode generated afterwards:</p>\n\n<pre><code>body_acceleration\nbody_acceleration_ee\nbody_jacobian_matrix\nbody_jacobian_matrix_dot \nbody_jacobian_matrix_ee\nbody_jacobian_matrix_ee_dot\nbody_twist_ee\nforward_kinematics\nhybrid_acceleration\nhybrid_acceleration_ee\nhybrid_jacobian_matrix\nhybrid_jacobian_matrix_dot\nhybrid_jacobian_matrix_ee\nhybrid_jacobian_matrix_ee_dot\nhybrid_twist_ee\n</code></pre>\n\n<p>Needs class parameters body_ref_config, joint_screw_coord and ee \nto be defined.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>q (sympy.Matrix, optional):</strong>   (n,1) Generalized position vector. Defaults to None.</li>\n<li><strong>qd (sympy.Matrix, optional):</strong>   (n,1) Generalized velocity vector. Defaults to None.</li>\n<li><strong>q2d (sympy.Matrix, optional):</strong>   (n,1) Generalized acceleration vector. Defaults to None.</li>\n<li><strong>simplify (bool, optional):</strong>   Use simplify command on saved expressions. \nDefaults to True.</li>\n<li><strong>cse (bool, optional):</strong>   Use common subexpression elimination. Defaults to False.</li>\n<li><strong>parallel (bool, optional):</strong>   Use parallel computation via multiprocessing. \nDefaults to True.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  Joint screw coordinates and/or reference configuration \nof bodies not set.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>sympy.Matrix: Forward kinematics.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">q</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"o\">.</span><span class=\"n\">dense</span><span class=\"o\">.</span><span class=\"n\">MutableDenseMatrix</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">qd</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"o\">.</span><span class=\"n\">dense</span><span class=\"o\">.</span><span class=\"n\">MutableDenseMatrix</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">q2d</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"o\">.</span><span class=\"n\">dense</span><span class=\"o\">.</span><span class=\"n\">MutableDenseMatrix</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">simplify</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">cse</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">parallel</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"o\">.</span><span class=\"n\">dense</span><span class=\"o\">.</span><span class=\"n\">MutableDenseMatrix</span>:</span></span>", "funcdef": "def"}, {"fullname": "skidy.kinematics_generator.SymbolicKinDyn.closed_form_inv_dyn_body_fixed", "modulename": "skidy.kinematics_generator", "qualname": "SymbolicKinDyn.closed_form_inv_dyn_body_fixed", "kind": "function", "doc": "<p>Inverse dynamics using body fixed representation of the \ntwists in closed form. </p>\n\n<p>The following expressions are saved in the class and can be \ncode generated afterwards:\n    coriolis_centrifugal_matrix\n    generalized_mass_inertia_matrix\n    gravity_vector\n    inverse_dynamics</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>q (sympy.Matrix, optional):</strong>   (n,1) Generalized position vector. Defaults to None.</li>\n<li><strong>qd (sympy.Matrix, optional):</strong>   (n,1) Generalized velocity vector. Defaults to None.</li>\n<li><strong>q2d (sympy.Matrix, optional):</strong>   (n,1) Generalized acceleration vector. Defaults to None.</li>\n<li><strong>q3d (sympy.Matrix, optional):</strong>   (n,1) Generalized jerk vector. Defaults to None.</li>\n<li><strong>q4d (sympy.Matrix, optional):</strong>   (n,1) Generalized jounce vector. Defaults to None.</li>\n<li><strong>WEE (list | sympy.Matrix, optional):</strong>   (6,1) WEE (t) = [Mx,My,Mz,Fx,Fy,Fz] is the time varying \nwrench on the EE link. \nIf there is more than one end-effector, you can use a \nlist containing all wrenches instead.\nDefaults to zeros(6, 1).</li>\n<li><strong>WDEE (list | sympy.Matrix, optional):</strong>   (6,1) WDEE (t) = [dMx,dMy,dMz,dFx,dFy,dFz] is the derivative \nof the time varying wrench on the EE link. \nIf there is more than one end-effector, you can use a \nlist containing all wrenches instead.\nDefaults to zeros(6, 1).</li>\n<li><strong>W2DEE (list | sympy.Matrix, optional):</strong>   (6,1) W2DEE (t) = [ddMx,ddMy,ddMz,ddFx,ddFy,ddFz] is the \n2nd derivative of the time varying wrench on the EE link. \nIf there is more than one end-effector, you can use a \nlist containing all wrenches instead.\nDefaults to zeros(6, 1).</li>\n<li><strong>simplify (bool, optional):</strong>   Use simplify command on saved expressions. \nDefaults to True.</li>\n<li><strong>cse (bool, optional):</strong>   Use common subexpression elimination. Defaults to False.</li>\n<li><strong>parallel (bool, optional):</strong>   Use parallel computation via multiprocessing. \nDefaults to True.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  Joint screw coordinates and/or reference configuration \nof bodies not set.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>sympy.Matrix: Generalized forces</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">q</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"o\">.</span><span class=\"n\">dense</span><span class=\"o\">.</span><span class=\"n\">MutableDenseMatrix</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">qd</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"o\">.</span><span class=\"n\">dense</span><span class=\"o\">.</span><span class=\"n\">MutableDenseMatrix</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">q2d</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"o\">.</span><span class=\"n\">dense</span><span class=\"o\">.</span><span class=\"n\">MutableDenseMatrix</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">q3d</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"o\">.</span><span class=\"n\">dense</span><span class=\"o\">.</span><span class=\"n\">MutableDenseMatrix</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">q4d</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"o\">.</span><span class=\"n\">dense</span><span class=\"o\">.</span><span class=\"n\">MutableDenseMatrix</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">WEE</span><span class=\"p\">:</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"o\">.</span><span class=\"n\">dense</span><span class=\"o\">.</span><span class=\"n\">MutableDenseMatrix</span> <span class=\"o\">|</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"o\">.</span><span class=\"n\">dense</span><span class=\"o\">.</span><span class=\"n\">MutableDenseMatrix</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">Ellipsis</span>,</span><span class=\"param\">\t<span class=\"n\">WDEE</span><span class=\"p\">:</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"o\">.</span><span class=\"n\">dense</span><span class=\"o\">.</span><span class=\"n\">MutableDenseMatrix</span> <span class=\"o\">|</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"o\">.</span><span class=\"n\">dense</span><span class=\"o\">.</span><span class=\"n\">MutableDenseMatrix</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">Ellipsis</span>,</span><span class=\"param\">\t<span class=\"n\">W2DEE</span><span class=\"p\">:</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"o\">.</span><span class=\"n\">dense</span><span class=\"o\">.</span><span class=\"n\">MutableDenseMatrix</span> <span class=\"o\">|</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"o\">.</span><span class=\"n\">dense</span><span class=\"o\">.</span><span class=\"n\">MutableDenseMatrix</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">Ellipsis</span>,</span><span class=\"param\">\t<span class=\"n\">simplify</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">cse</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">parallel</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"o\">.</span><span class=\"n\">dense</span><span class=\"o\">.</span><span class=\"n\">MutableDenseMatrix</span>:</span></span>", "funcdef": "def"}, {"fullname": "skidy.kinematics_generator.SymbolicKinDyn.partial_factor", "modulename": "skidy.kinematics_generator", "qualname": "SymbolicKinDyn.partial_factor", "kind": "function", "doc": "<p>Partial factor simplification for sympy expression.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>exp (sympy.Expr):</strong>  sympy expression.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>sympy.Expr: modified sympy expression.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">exp</span><span class=\"p\">:</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">expr</span><span class=\"o\">.</span><span class=\"n\">Expr</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">expr</span><span class=\"o\">.</span><span class=\"n\">Expr</span>:</span></span>", "funcdef": "def"}, {"fullname": "skidy.kinematics_generator.SymbolicKinDyn.collect_and_subs", "modulename": "skidy.kinematics_generator", "qualname": "SymbolicKinDyn.collect_and_subs", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ex</span><span class=\"p\">:</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">expr</span><span class=\"o\">.</span><span class=\"n\">Expr</span>, </span><span class=\"param\"><span class=\"n\">terms</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">expr</span><span class=\"o\">.</span><span class=\"n\">Expr</span>:</span></span>", "funcdef": "def"}, {"fullname": "skidy.kinematics_generator.SymbolicKinDyn.simplify", "modulename": "skidy.kinematics_generator", "qualname": "SymbolicKinDyn.simplify", "kind": "function", "doc": "<p>Faster simplify implementation for sympy expressions.\nExpressions can be different simplified as with sympy.simplify.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>exp (sympy expression):</strong>   Expression to simplify.</li>\n<li><strong>cse (bool, optional):</strong>   Use common subexpression elimination. Defaults to False.</li>\n<li><strong>simplify (bool, optional):</strong>   deactivate simplification by setting simplify to False. \nDefaults to True.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>sympy expression: Simplified expression.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">exp</span><span class=\"p\">:</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">expr</span><span class=\"o\">.</span><span class=\"n\">Expr</span>,</span><span class=\"param\">\t<span class=\"n\">cse</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">simplify</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">expr</span><span class=\"o\">.</span><span class=\"n\">Expr</span>:</span></span>", "funcdef": "def"}, {"fullname": "skidy.kinematics_generator.SymbolicKinDyn.load_from_urdf", "modulename": "skidy.kinematics_generator", "qualname": "SymbolicKinDyn.load_from_urdf", "kind": "function", "doc": "<p>Load robot from urdf.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>path (str):</strong>  path to URDF.</li>\n<li><strong>symbolic (bool, optional):</strong>   generate symbols for numeric values. \nDefaults to False.</li>\n<li><strong>cse (bool, optional):</strong>   use common subexpression elimination. Defaults to False.</li>\n<li><strong>simplify_numbers (bool, optional):</strong>   Use eg. pi/2 instead of 1.5708. Defaults to True.</li>\n<li><strong>tolerance (float, optional):</strong>   tolerance for simplify_numbers. Defaults to 0.0001.</li>\n<li><strong>max_denominator (int, optional):</strong>   Maximum denominator to use for simplify numbers to avoid\nvalues like 13/153. Use 0 to deactivate. Defaults to 9.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>NotImplementedError:</strong>  supports only the joint types \n\"revolute\", \"continuous\" and \"prismatic\".</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">symbolic</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">cse</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">simplify_numbers</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">tolerance</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0001</span>,</span><span class=\"param\">\t<span class=\"n\">max_denominator</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">9</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "skidy.kinematics_generator.SymbolicKinDyn.to_yaml", "modulename": "skidy.kinematics_generator", "qualname": "SymbolicKinDyn.to_yaml", "kind": "function", "doc": "<p>Save robot as YAML file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>path (str, optional):</strong>  Path where to save .yaml file. \nDefaults to \"robot.yaml\".</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;robot.yaml&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "skidy.kinematics_generator.SymbolicKinDyn.to_json", "modulename": "skidy.kinematics_generator", "qualname": "SymbolicKinDyn.to_json", "kind": "function", "doc": "<p>Save robot as JSON file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>path (str, optional):</strong>  Path where to save .json file. \nDefaults to \"robot.json\".</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;robot.json&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "skidy.kinematics_generator.SymbolicKinDyn.dh_to_screw_coord", "modulename": "skidy.kinematics_generator", "qualname": "SymbolicKinDyn.dh_to_screw_coord", "kind": "function", "doc": "<p>Build screw coordinate paramters (joint axis frames and \nbody reference frames) from a given modified Denavit-Hartenberg \n(DH) parameter table.\nJoint screw coordinates and reference configurations of bodies \nare directly applied to class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>DH_param_table (array_like):</strong>   Table with modified DH parameters (n,5) \n-> (gamma,alpha,d,theta,r)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">DH_param_table</span><span class=\"p\">:</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"o\">.</span><span class=\"n\">dense</span><span class=\"o\">.</span><span class=\"n\">MutableDenseMatrix</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "skidy.matrices", "modulename": "skidy.matrices", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "skidy.matrices.generalized_vectors", "modulename": "skidy.matrices", "qualname": "generalized_vectors", "kind": "function", "doc": "<p>Generate symbolic generalized vectors q, qd and q2d and optional\nq3d and q4d.</p>\n\n<h6 id=\"the-symbols-are-named-as-follows\">The symbols are named as follows:</h6>\n\n<blockquote>\n  <p>q0, q1, ....., qi for joint positions.\n  dq0, dq1, ....., dqi for joint velocities.\n  ddq0, ddq1, ....., ddqi for joint accelerations.\n  dddq0, dddq1, ....., dddqi for joint jerks.\n  ddddq0, ddddq1, ....., ddddqi for joint jounces.</p>\n</blockquote>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>DOF (int):</strong>  Degrees of freedom.</li>\n<li><strong>startindex (int, optional):</strong>  Index of first joint. Defaults to 0.</li>\n<li><strong>derivatives (bool, optional):</strong>  return jerks and jounces too. \nDefaults to False. </li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple(sympy.Matrix): \n      Generalized vectors: (q,dq,d2q) if derivative == False\n      else: (q,dq,d2q,q3d,q4d)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">DOF</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">startindex</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">derivatives</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"o\">.</span><span class=\"n\">dense</span><span class=\"o\">.</span><span class=\"n\">MutableDenseMatrix</span><span class=\"p\">,</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"o\">.</span><span class=\"n\">dense</span><span class=\"o\">.</span><span class=\"n\">MutableDenseMatrix</span><span class=\"p\">,</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"o\">.</span><span class=\"n\">dense</span><span class=\"o\">.</span><span class=\"n\">MutableDenseMatrix</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "skidy.matrices.joint_screw", "modulename": "skidy.matrices", "qualname": "joint_screw", "kind": "function", "doc": "<p>Get joint screw coordinates from joint axis and vector to joint.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>axis (list):</strong>   Joint axis w.r.t. inertial frame.</li>\n<li><strong>vec (list, optional):</strong>   Vector to joint axis from inertial frame for revolute joint. \nDefaults to [0,0,0].</li>\n<li><strong>revolute (bool, optional):</strong>   Revolute (True) or prismatic (False) joint. \nDefaults to True.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>sympy.Matrix: joint screw coordinates.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">axis</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">vec</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">revolute</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"o\">.</span><span class=\"n\">dense</span><span class=\"o\">.</span><span class=\"n\">MutableDenseMatrix</span>:</span></span>", "funcdef": "def"}, {"fullname": "skidy.matrices.symbolic_inertia_matrix", "modulename": "skidy.matrices", "qualname": "symbolic_inertia_matrix", "kind": "function", "doc": "<p>Create 3 x 3 symbolic inertia matrix with auto generated variable names.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>index (int or str):</strong>   postfix for variable name. Defaults to \"\".</li>\n<li><strong>pointmass (bool):</strong>   Inertial matrix = I * Identity. Default to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>sympy.Matrix: Inertia matrix (3,3)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">pointmass</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"o\">.</span><span class=\"n\">dense</span><span class=\"o\">.</span><span class=\"n\">MutableDenseMatrix</span>:</span></span>", "funcdef": "def"}, {"fullname": "skidy.matrices.SE3AdjInvMatrix", "modulename": "skidy.matrices", "qualname": "SE3AdjInvMatrix", "kind": "function", "doc": "<p>Compute Inverse of (6x6) Adjoint matrix for SE(3)</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>C (sympy.Matrix):</strong>  SE(3) Pose.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>sympy.Matrix: Inverse of (6x6) Adjoint matrix</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">C</span><span class=\"p\">:</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"o\">.</span><span class=\"n\">dense</span><span class=\"o\">.</span><span class=\"n\">MutableDenseMatrix</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"o\">.</span><span class=\"n\">dense</span><span class=\"o\">.</span><span class=\"n\">MutableDenseMatrix</span>:</span></span>", "funcdef": "def"}, {"fullname": "skidy.matrices.SE3AdjMatrix", "modulename": "skidy.matrices", "qualname": "SE3AdjMatrix", "kind": "function", "doc": "<p>Compute (6x6) Adjoint matrix for SE(3)</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>C ([type]):</strong>  SE(3) Pose.</li>\n</ul>\n\n<p>Returns:\nsympy.Matrix: (6x6) Adjoint matrix</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">C</span><span class=\"p\">:</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"o\">.</span><span class=\"n\">dense</span><span class=\"o\">.</span><span class=\"n\">MutableDenseMatrix</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"o\">.</span><span class=\"n\">dense</span><span class=\"o\">.</span><span class=\"n\">MutableDenseMatrix</span>:</span></span>", "funcdef": "def"}, {"fullname": "skidy.matrices.SE3adMatrix", "modulename": "skidy.matrices", "qualname": "SE3adMatrix", "kind": "function", "doc": "<p>Compute (6x6) adjoint matrix for SE(3) \n    - also known as spatial cross product in the literature.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>X (sympy.Matrix):</strong>  (6x1) spatial vector.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>sympy.Matrix: (6x6) adjoint matrix</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"o\">.</span><span class=\"n\">dense</span><span class=\"o\">.</span><span class=\"n\">MutableDenseMatrix</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"o\">.</span><span class=\"n\">dense</span><span class=\"o\">.</span><span class=\"n\">MutableDenseMatrix</span>:</span></span>", "funcdef": "def"}, {"fullname": "skidy.matrices.SE3Exp", "modulename": "skidy.matrices", "qualname": "SE3Exp", "kind": "function", "doc": "<p>compute exponential mapping for SE(3).</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>XX (sympy.Matrix):</strong>  (6,1) spatial vector.</li>\n<li><strong>t (sympy.Expr):</strong>  rotation angle.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>sympy.Matrix: (4,4) SE(3) Pose.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">XX</span><span class=\"p\">:</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"o\">.</span><span class=\"n\">dense</span><span class=\"o\">.</span><span class=\"n\">MutableDenseMatrix</span>,</span><span class=\"param\">\t<span class=\"n\">t</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">expr</span><span class=\"o\">.</span><span class=\"n\">Expr</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"o\">.</span><span class=\"n\">dense</span><span class=\"o\">.</span><span class=\"n\">MutableDenseMatrix</span>:</span></span>", "funcdef": "def"}, {"fullname": "skidy.matrices.SE3Inv", "modulename": "skidy.matrices", "qualname": "SE3Inv", "kind": "function", "doc": "<p>Compute analytical inverse of exponential mapping for SE(3).</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>C (sympy.Matrix):</strong>  (4,4) SE(3) Pose.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>sympy.Matrix: (4,4) Inverse of SE(3) Pose.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">C</span><span class=\"p\">:</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"o\">.</span><span class=\"n\">dense</span><span class=\"o\">.</span><span class=\"n\">MutableDenseMatrix</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"o\">.</span><span class=\"n\">dense</span><span class=\"o\">.</span><span class=\"n\">MutableDenseMatrix</span>:</span></span>", "funcdef": "def"}, {"fullname": "skidy.matrices.SO3Exp", "modulename": "skidy.matrices", "qualname": "SO3Exp", "kind": "function", "doc": "<p>Compute exponential mapping for SO(3).</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>axis (sympy.Matrix):</strong>  Rotation axis</li>\n<li><strong>angle (double):</strong>  Rotation angle</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>sympy.Matrix: Rotation matrix</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">axis</span><span class=\"p\">:</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"o\">.</span><span class=\"n\">dense</span><span class=\"o\">.</span><span class=\"n\">MutableDenseMatrix</span>,</span><span class=\"param\">\t<span class=\"n\">angle</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">expr</span><span class=\"o\">.</span><span class=\"n\">Expr</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"o\">.</span><span class=\"n\">dense</span><span class=\"o\">.</span><span class=\"n\">MutableDenseMatrix</span>:</span></span>", "funcdef": "def"}, {"fullname": "skidy.matrices.inertia_matrix", "modulename": "skidy.matrices", "qualname": "inertia_matrix", "kind": "function", "doc": "<p>Create 3 x 3 inertia matrix from independent inertia values.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>Ixx (float or sympy.Expr):</strong>  Inertia value I11. Defaults to 0.</li>\n<li><strong>Ixy (float or sympy.Expr):</strong>  Inertia value I12. Defaults to 0.</li>\n<li><strong>Ixz (float or sympy.Expr):</strong>  Inertia value I13. Defaults to 0.</li>\n<li><strong>Iyy (float or sympy.Expr):</strong>  Inertia value I22. Defaults to 0.</li>\n<li><strong>Iyz (float or sympy.Expr):</strong>  Inertia value I23. Defaults to 0.</li>\n<li><strong>Izz (float or sympy.Expr):</strong>  Inertia value I33. Defaults to 0.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>sympy.Matrix: Inertia matrix (3,3)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">Ixx</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">expr</span><span class=\"o\">.</span><span class=\"n\">Expr</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">Ixy</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">expr</span><span class=\"o\">.</span><span class=\"n\">Expr</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">Ixz</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">expr</span><span class=\"o\">.</span><span class=\"n\">Expr</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">Iyy</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">expr</span><span class=\"o\">.</span><span class=\"n\">Expr</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">Iyz</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">expr</span><span class=\"o\">.</span><span class=\"n\">Expr</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">Izz</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">expr</span><span class=\"o\">.</span><span class=\"n\">Expr</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"o\">.</span><span class=\"n\">dense</span><span class=\"o\">.</span><span class=\"n\">MutableDenseMatrix</span>:</span></span>", "funcdef": "def"}, {"fullname": "skidy.matrices.transformation_matrix", "modulename": "skidy.matrices", "qualname": "transformation_matrix", "kind": "function", "doc": "<p>Build transformation matrix from rotation and translation.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>r (sympy.Matrix):</strong>   SO(3) Rotation matrix (3,3). \nDefaults to sympy.Matrix(Identity(3))</li>\n<li><strong>t (sympy.Matrix):</strong>   Translation vector (3,1). Defaults to sympy.zeros(3,1)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>sympy.Matrix: Transformation matrix (4,4)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">r</span><span class=\"p\">:</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"o\">.</span><span class=\"n\">dense</span><span class=\"o\">.</span><span class=\"n\">MutableDenseMatrix</span> <span class=\"o\">=</span> <span class=\"n\">Matrix</span><span class=\"p\">([</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]])</span>,</span><span class=\"param\">\t<span class=\"n\">t</span><span class=\"p\">:</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"o\">.</span><span class=\"n\">dense</span><span class=\"o\">.</span><span class=\"n\">MutableDenseMatrix</span> <span class=\"o\">=</span> <span class=\"n\">Matrix</span><span class=\"p\">([</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]])</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"o\">.</span><span class=\"n\">dense</span><span class=\"o\">.</span><span class=\"n\">MutableDenseMatrix</span>:</span></span>", "funcdef": "def"}, {"fullname": "skidy.matrices.mass_matrix_mixed_data", "modulename": "skidy.matrices", "qualname": "mass_matrix_mixed_data", "kind": "function", "doc": "<p>Build mass-inertia matrix in SE(3) from mass, inertia and \ncenter of mass information.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>m (float | sympy.Expr):</strong>  Mass.</li>\n<li><strong>Theta (array_like):</strong>  Inertia (3,3).</li>\n<li><strong>COM (array_like):</strong>  Center of mass (3,1).</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>sympy.Matrix: Mass-inertia matrix (6,6).</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">m</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">expr</span><span class=\"o\">.</span><span class=\"n\">Expr</span>,</span><span class=\"param\">\t<span class=\"n\">Theta</span><span class=\"p\">:</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"o\">.</span><span class=\"n\">dense</span><span class=\"o\">.</span><span class=\"n\">MutableDenseMatrix</span>,</span><span class=\"param\">\t<span class=\"n\">COM</span><span class=\"p\">:</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"o\">.</span><span class=\"n\">dense</span><span class=\"o\">.</span><span class=\"n\">MutableDenseMatrix</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"o\">.</span><span class=\"n\">dense</span><span class=\"o\">.</span><span class=\"n\">MutableDenseMatrix</span>:</span></span>", "funcdef": "def"}, {"fullname": "skidy.matrices.mass_matrix_mixed_data_identification", "modulename": "skidy.matrices", "qualname": "mass_matrix_mixed_data_identification", "kind": "function", "doc": "<p>Build mass-inertia matrix in SE(3) from mass, inertia and \nfirst moment of mass, i.e. m*com_vector.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>m (float):</strong>  Mass.</li>\n<li><strong>Theta (array_like):</strong>  Inertia (3,3).</li>\n<li><strong>h (array_like):</strong>  First moment of mass, i.e. m*com_vector. (3,1).</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>sympy.Matrix: Mass-inertia matrix (6,6).</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">m</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">expr</span><span class=\"o\">.</span><span class=\"n\">Expr</span>,</span><span class=\"param\">\t<span class=\"n\">Theta</span><span class=\"p\">:</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"o\">.</span><span class=\"n\">dense</span><span class=\"o\">.</span><span class=\"n\">MutableDenseMatrix</span>,</span><span class=\"param\">\t<span class=\"n\">h</span><span class=\"p\">:</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"o\">.</span><span class=\"n\">dense</span><span class=\"o\">.</span><span class=\"n\">MutableDenseMatrix</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"o\">.</span><span class=\"n\">dense</span><span class=\"o\">.</span><span class=\"n\">MutableDenseMatrix</span>:</span></span>", "funcdef": "def"}, {"fullname": "skidy.matrices.mass_matrix_to_parameter_vector", "modulename": "skidy.matrices", "qualname": "mass_matrix_to_parameter_vector", "kind": "function", "doc": "<p>Get parameter vector for regressor matrix from mass-inertia matrix.\n    M -> m, m<em>cx, m</em>cy, m*cz, Ixx, Ixy, Ixz, Iyy, Iyz, Izz</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>M (MutableDenseMatrix):</strong>  (6,6) Mass-inertia matrix.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple[Expr]: \n      (m, m<em>cx, m</em>cy, m*cz, Ixx, Ixy, Ixz, Iyy, Iyz, Izz).</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">M</span><span class=\"p\">:</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"o\">.</span><span class=\"n\">dense</span><span class=\"o\">.</span><span class=\"n\">MutableDenseMatrix</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">expr</span><span class=\"o\">.</span><span class=\"n\">Expr</span><span class=\"p\">,</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">expr</span><span class=\"o\">.</span><span class=\"n\">Expr</span><span class=\"p\">,</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">expr</span><span class=\"o\">.</span><span class=\"n\">Expr</span><span class=\"p\">,</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">expr</span><span class=\"o\">.</span><span class=\"n\">Expr</span><span class=\"p\">,</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">expr</span><span class=\"o\">.</span><span class=\"n\">Expr</span><span class=\"p\">,</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">expr</span><span class=\"o\">.</span><span class=\"n\">Expr</span><span class=\"p\">,</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">expr</span><span class=\"o\">.</span><span class=\"n\">Expr</span><span class=\"p\">,</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">expr</span><span class=\"o\">.</span><span class=\"n\">Expr</span><span class=\"p\">,</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">expr</span><span class=\"o\">.</span><span class=\"n\">Expr</span><span class=\"p\">,</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">expr</span><span class=\"o\">.</span><span class=\"n\">Expr</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "skidy.matrices.rpy_to_matrix", "modulename": "skidy.matrices", "qualname": "rpy_to_matrix", "kind": "function", "doc": "<p>Convert roll-pitch-yaw coordinates to a 3x3 homogenous rotation matrix.</p>\n\n<p>The roll-pitch-yaw axes in a typical URDF are defined as a\nrotation of <code>r</code> radians around the x-axis followed by a rotation of\n<code>p</code> radians around the y-axis followed by a rotation of <code>y</code> radians\naround the z-axis. These are the Z1-Y2-X3 Tait-Bryan angles. See\nWikipedia_ for more information.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>coords (MutableDenseMatrix | list):</strong>   The (3,) roll-pitch-yaw coordinates in order (x-rot, y-rot, z-rot).</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>MutableDenseMatrix: \n      The corresponding homogenous 3x3 rotation matrix.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">coords</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"o\">.</span><span class=\"n\">dense</span><span class=\"o\">.</span><span class=\"n\">MutableDenseMatrix</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"o\">.</span><span class=\"n\">dense</span><span class=\"o\">.</span><span class=\"n\">MutableDenseMatrix</span>:</span></span>", "funcdef": "def"}, {"fullname": "skidy.matrices.xyz_rpy_to_matrix", "modulename": "skidy.matrices", "qualname": "xyz_rpy_to_matrix", "kind": "function", "doc": "<p>Convert xyz_rpy coordinates to a 4x4 homogenous matrix.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>xyz_rpy (MutableDenseMatrix | list):</strong>   The (6,) xyz_rpy vector.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>MutableDenseMatrix: \n      The (4,4) homogenous transform matrix.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">xyz_rpy</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"o\">.</span><span class=\"n\">dense</span><span class=\"o\">.</span><span class=\"n\">MutableDenseMatrix</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"o\">.</span><span class=\"n\">dense</span><span class=\"o\">.</span><span class=\"n\">MutableDenseMatrix</span>:</span></span>", "funcdef": "def"}, {"fullname": "skidy.matrices.matrix_to_rpy", "modulename": "skidy.matrices", "qualname": "matrix_to_rpy", "kind": "function", "doc": "<p>Convert a 3x3 transform matrix to roll-pitch-yaw coordinates.</p>\n\n<p>The roll-pitchRyaw axes in a typical URDF are defined as a\nrotation of <code>r</code> radians around the x-axis followed by a rotation of\n<code>p</code> radians around the y-axis followed by a rotation of <code>y</code> radians\naround the z-axis. These are the Z1-Y2-X3 Tait-Bryan angles. See\nWikipedia_ for more information.</p>\n\n<p>There are typically two possible roll-pitch-yaw coordinates that could have\ncreated a given rotation matrix. Specify <code>solution=1</code> for the first one\nand <code>solution=2</code> for the second one.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>R (ArrayLike):</strong>   A 3x3 homogenous rotation matrix.</li>\n<li><strong>solution (int, optional):</strong>   Either 1 or 2, indicating which solution to return. \nDefaults to 1.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>ndarray:\n      The (3,) roll-pitch-yaw coordinates in order (x-rot, y-rot, z-rot).</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">R</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_nested_sequence</span><span class=\"o\">.</span><span class=\"n\">_NestedSequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]],</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_nested_sequence</span><span class=\"o\">.</span><span class=\"n\">_NestedSequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]]</span>,</span><span class=\"param\">\t<span class=\"n\">solution</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "skidy.matrices.matrix_to_xyz_rpy", "modulename": "skidy.matrices", "qualname": "matrix_to_xyz_rpy", "kind": "function", "doc": "<p>Convert a 4x4 homogenous matrix to xyzrpy coordinates.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matrix (ndarray):</strong>   The (4, 4) homogenous transform matrix.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>ndarray: The (6,) xyz_rpy vector.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">matrix</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "skidy.matrices.quaternion_to_matrix", "modulename": "skidy.matrices", "qualname": "quaternion_to_matrix", "kind": "function", "doc": "<p>Convert a quaternion into SO(3) rotation matrix.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>Q (list | sympy.MutableDenseMatrix):</strong>  Quaternion in order [w,x,y,z].</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>sympy.Matrix: (3,3) Rotation matrix.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">Q</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"o\">.</span><span class=\"n\">dense</span><span class=\"o\">.</span><span class=\"n\">MutableDenseMatrix</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"o\">.</span><span class=\"n\">dense</span><span class=\"o\">.</span><span class=\"n\">MutableDenseMatrix</span>:</span></span>", "funcdef": "def"}, {"fullname": "skidy.parser", "modulename": "skidy.parser", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "skidy.parser.robot_from_yaml", "modulename": "skidy.parser", "qualname": "robot_from_yaml", "kind": "function", "doc": "<p>Parse yaml robot description and return SymbolicKinDyn Object.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>path (str):</strong>  Path to yaml file.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>skidy.SymbolicKinDyn object.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">skidy</span><span class=\"o\">.</span><span class=\"n\">kinematics_generator</span><span class=\"o\">.</span><span class=\"n\">SymbolicKinDyn</span>:</span></span>", "funcdef": "def"}, {"fullname": "skidy.parser.robot_from_json", "modulename": "skidy.parser", "qualname": "robot_from_json", "kind": "function", "doc": "<p>Parse json robot description and return SymbolicKinDyn Object.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>path (str):</strong>  Path to json file.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>skidy.SymbolicKinDyn object.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">skidy</span><span class=\"o\">.</span><span class=\"n\">kinematics_generator</span><span class=\"o\">.</span><span class=\"n\">SymbolicKinDyn</span>:</span></span>", "funcdef": "def"}, {"fullname": "skidy.parser.parse_hierarchical_expr", "modulename": "skidy.parser", "qualname": "parse_hierarchical_expr", "kind": "function", "doc": "<p>Convert strings in data structure (list or dict) to sympy \nexpressions.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (list | dict | str):</strong>   Hierarchical structure which might contain symbolic \nexpression as string. </li>\n<li><strong>include_keys (Iterable):</strong>   Only convert strings with listed dict_keys. \nDefaults to {}.</li>\n<li><strong>exclude_keys (Iterable):</strong>   Don't convert strings with listed dict_keys. \nDefaults to {}.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list | dict | sympy.Expr: \n      Same data structure with strings converted to sympy.Expr.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">include_keys</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">exclude_keys</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span> <span class=\"o\">=</span> <span class=\"p\">{}</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"n\">sympy</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">expr</span><span class=\"o\">.</span><span class=\"n\">Expr</span>:</span></span>", "funcdef": "def"}, {"fullname": "skidy.parser.dict_parser", "modulename": "skidy.parser", "qualname": "dict_parser", "kind": "function", "doc": "<p>Parse dict to SymbolicKinDyn object.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>d (dict):</strong>  Dictionary containing robot description.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>KeyError:</strong>  Entry not found.</li>\n<li><strong>ValueError:</strong>  Unexpected entry.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>skidy.SymbolicKinDyn object.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">d</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">skidy</span><span class=\"o\">.</span><span class=\"n\">kinematics_generator</span><span class=\"o\">.</span><span class=\"n\">SymbolicKinDyn</span>:</span></span>", "funcdef": "def"}, {"fullname": "skidy.parser.generate_template_yaml", "modulename": "skidy.parser", "qualname": "generate_template_yaml", "kind": "function", "doc": "<p>Generate template yaml file to modify for own robot.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>path (str, optional):</strong>  Path where to save generated yaml file.\nDefaults to 'edit_me.yaml' </li>\n<li><strong>structure (str, optional):</strong>  string containing only 'r' and 'p' of \njoint order. Use \"prr\" for a robot which has 1 prismatic joint\nfollowed by 2 revolute joints. Defaults to None.</li>\n<li><strong>dof (int, optional):</strong>  Degrees of freedom. Is usually calculated \nby length of 'structure'. Defaults to 0.</li>\n<li><strong>tree (bool, optional):</strong>  Generate parent, child and support array \nin yaml file. Defaults to True.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  Unexpected letter in 'structure'.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;edit_me.yaml&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">structure</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">dof</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">tree</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "skidy.parser.generate_template_json", "modulename": "skidy.parser", "qualname": "generate_template_json", "kind": "function", "doc": "<p>Generate template json file to modify for own robot.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>path (str, optional):</strong>  Path where to save generated json file.\nDefaults to 'edit_me.json' </li>\n<li><strong>structure (str, optional):</strong>  string containing only 'r' and 'p' of \njoint order. Use \"prr\" for a robot which has 1 prismatic joint\nfollowed by 2 revolute joints. Defaults to None.</li>\n<li><strong>dof (int, optional):</strong>  Degrees of freedom. Is usually calculated \nby length of 'structure'. Defaults to 0.</li>\n<li><strong>tree (bool, optional):</strong>  Generate parent, child and support array \nin yaml file. Defaults to True.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  Unexpected letter in 'structure'.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;edit_me.json&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">structure</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">dof</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">tree</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "skidy.parser.generate_template_python", "modulename": "skidy.parser", "qualname": "generate_template_python", "kind": "function", "doc": "<p>Generate template python file to modify for own robot.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>path (str, optional):</strong>  Path where to save generated python file.\nDefaults to 'edit_me.py' </li>\n<li><strong>structure (str, optional):</strong>  string containing only 'r' and 'p' of \njoint order. Use \"prr\" for a robot which has 1 prismatic joint\nfollowed by 2 revolute joints. Defaults to None.</li>\n<li><strong>dof (int, optional):</strong>  Degrees of freedom. Is usually calculated \nby length of 'structure'. Defaults to 0.</li>\n<li><strong>tree (bool, optional):</strong>  Generate parent, child and support array \nin yaml file. Defaults to True.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  Unexpected letter in 'structure'.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;edit_me.py&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">structure</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">dof</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">tree</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">urdf</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "skidy.parser.robot_from_urdf", "modulename": "skidy.parser", "qualname": "robot_from_urdf", "kind": "function", "doc": "<p>Load robot from urdf.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>path (str):</strong>  path to URDF.</li>\n<li><strong>symbolic (bool, optional):</strong>   generate symbols for numeric values. \nDefaults to False.</li>\n<li><strong>cse (bool, optional):</strong>   use common subexpression elimination. Defaults to False.</li>\n<li><strong>simplify_numbers (bool, optional):</strong>   Use eg. pi/2 instead of 1.5708. Defaults to True.</li>\n<li><strong>tolerance (float, optional):</strong>   tolerance for simplify_numbers. Defaults to 0.0001.</li>\n<li><strong>max_denominator (int, optional):</strong>   Maximum denominator to use for simplify numbers to avoid\nvalues like 13/153. Use 0 to deactivate. Defaults to 9.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>NotImplementedError:</strong>  supports only the joint types \n\"revolute\", \"continuous\" and \"prismatic\".</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>skidy.SymbolicKinDyn object.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">symbolic</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">cse</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">simplify_numbers</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">tolerance</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0001</span>,</span><span class=\"param\">\t<span class=\"n\">max_denominator</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">9</span></span><span class=\"return-annotation\">) -> <span class=\"n\">skidy</span><span class=\"o\">.</span><span class=\"n\">kinematics_generator</span><span class=\"o\">.</span><span class=\"n\">SymbolicKinDyn</span>:</span></span>", "funcdef": "def"}, {"fullname": "skidy.parser.skd_to_yaml", "modulename": "skidy.parser", "qualname": "skd_to_yaml", "kind": "function", "doc": "<p>Generate YAML file from SymbolicKinDyn object.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>skd (SymbolicKinDyn):</strong>  SymbolicKinDyn with set parameters.</li>\n<li><strong>path (str, optional):</strong>  path where to save .yaml file. \nDefaults to \"robot.yaml\".</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">skd</span><span class=\"p\">:</span> <span class=\"n\">skidy</span><span class=\"o\">.</span><span class=\"n\">kinematics_generator</span><span class=\"o\">.</span><span class=\"n\">SymbolicKinDyn</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;robot.yaml&#39;</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span> <span class=\"o\">|</span> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "skidy.parser.skd_to_json", "modulename": "skidy.parser", "qualname": "skd_to_json", "kind": "function", "doc": "<p>Generate JSON file from SymbolicKinDyn object.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>skd (SymbolicKinDyn):</strong>  SymbolicKinDyn with set parameters.</li>\n<li><strong>path (str, optional):</strong>  path where to save .json file. \nDefaults to \"robot.json\".</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">skd</span><span class=\"p\">:</span> <span class=\"n\">skidy</span><span class=\"o\">.</span><span class=\"n\">kinematics_generator</span><span class=\"o\">.</span><span class=\"n\">SymbolicKinDyn</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;robot.json&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "skidy.parser.urdf_to_yaml", "modulename": "skidy.parser", "qualname": "urdf_to_yaml", "kind": "function", "doc": "<p>Load robot from urdf and save it to YAML file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>urdf_path (str):</strong>  path to URDF.</li>\n<li><strong>yaml_path (str, optional):</strong>  path where to save .yaml file. \nDefaults to \"robot.yaml\".</li>\n<li><strong>symbolic (bool, optional):</strong>   generate symbols for numeric values. \nDefaults to False.</li>\n<li><strong>cse (bool, optional):</strong>   use common subexpression elimination. Defaults to False.</li>\n<li><strong>simplify_numbers (bool, optional):</strong>   Use eg. pi/2 instead of 1.5708. Defaults to True.</li>\n<li><strong>tolerance (float, optional):</strong>   tolerance for simplify_numbers. Defaults to 0.0001.</li>\n<li><strong>max_denominator (int, optional):</strong>   Maximum denominator to use for simplify numbers to avoid\nvalues like 13/153. Use 0 to deactivate. Defaults to 9.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>NotImplementedError:</strong>  supports only the joint types \n\"revolute\", \"continuous\" and \"prismatic\".</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">urdf_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">yaml_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;robot.yaml&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">symbolic</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">cse</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">simplify_numbers</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">tolerance</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0001</span>,</span><span class=\"param\">\t<span class=\"n\">max_denominator</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">9</span></span><span class=\"return-annotation\">) -> <span class=\"n\">skidy</span><span class=\"o\">.</span><span class=\"n\">kinematics_generator</span><span class=\"o\">.</span><span class=\"n\">SymbolicKinDyn</span>:</span></span>", "funcdef": "def"}, {"fullname": "skidy.parser.urdf_to_json", "modulename": "skidy.parser", "qualname": "urdf_to_json", "kind": "function", "doc": "<p>Load robot from urdf and save it to JSON file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>urdf_path (str):</strong>  path to URDF.</li>\n<li><strong>json_path (str, optional):</strong>  path where to save .json file. \nDefaults to \"robot.json\".</li>\n<li><strong>symbolic (bool, optional):</strong>   generate symbols for numeric values. \nDefaults to False.</li>\n<li><strong>cse (bool, optional):</strong>   use common subexpression elimination. Defaults to False.</li>\n<li><strong>simplify_numbers (bool, optional):</strong>   Use eg. pi/2 instead of 1.5708. Defaults to True.</li>\n<li><strong>tolerance (float, optional):</strong>   tolerance for simplify_numbers. Defaults to 0.0001.</li>\n<li><strong>max_denominator (int, optional):</strong>   Maximum denominator to use for simplify numbers to avoid\nvalues like 13/153. Use 0 to deactivate. Defaults to 9.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>NotImplementedError:</strong>  supports only the joint types \n\"revolute\", \"continuous\" and \"prismatic\".</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">urdf_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">json_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;robot.json&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">symbolic</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">cse</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">simplify_numbers</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">tolerance</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0001</span>,</span><span class=\"param\">\t<span class=\"n\">max_denominator</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">9</span></span><span class=\"return-annotation\">) -> <span class=\"n\">skidy</span><span class=\"o\">.</span><span class=\"n\">kinematics_generator</span><span class=\"o\">.</span><span class=\"n\">SymbolicKinDyn</span>:</span></span>", "funcdef": "def"}, {"fullname": "skidy.symbols", "modulename": "skidy.symbols", "kind": "module", "doc": "<p>symbols:\nThis module exports all latin and greek letters, as well as some common \nused letter combinations with and without indices between 0 and 10.</p>\n\n<h6 id=\"usage\">Usage:</h6>\n\n<blockquote>\n  <p>To use the defined symbols use e.g.:</p>\n  \n  <p><code>from skidy.symbols import m1, l1, Ixx1, Fx</code></p>\n</blockquote>\n"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();